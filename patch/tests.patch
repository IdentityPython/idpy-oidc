





diff --git a/tests/op_config.json b/tests/op_config.json
index 3d0da0b..9ea2da4 100644
--- a/tests/op_config.json
+++ b/tests/op_config.json
@@ -44,7 +44,7 @@
       }
     }
   },
-  "capabilities": {
+  "preference": {
     "subject_types_supported": [
       "public",
       "pairwise"
diff --git a/tests/private/cookie_jwks.json b/tests/private/cookie_jwks.json
index 9d47588..5b507b7 100644
--- a/tests/private/cookie_jwks.json
+++ b/tests/private/cookie_jwks.json
@@ -1 +1 @@
-{"keys": [{"kty": "oct", "use": "enc", "kid": "enc", "k": "4L_0vvQ5QsJvswvh5qCNFyLF4BTSI6xf"}, {"kty": "oct", "use": "sig", "kid": "sig", "k": "UsJ7o_W_ND7aoKnbeWEes3MJOECMMY_c"}]}
\ No newline at end of file
+{"keys": [{"kty": "oct", "use": "enc", "kid": "enc", "k": "GpKOJkB-QVo3qV2FZMVZFvha-TyJTHeH"}, {"kty": "oct", "use": "sig", "kid": "sig", "k": "ugxh7wUNKyolAiXiEWFVL_BVcjaNxvvb"}]}
\ No newline at end of file
diff --git a/tests/private/token_jwks.json b/tests/private/token_jwks.json
index d3e0f07..d171cfa 100644
--- a/tests/private/token_jwks.json
+++ b/tests/private/token_jwks.json
@@ -1 +1 @@
-{"keys": [{"kty": "oct", "use": "enc", "kid": "code", "k": "vSHDkLBHhDStkR0NWu8519rmV5zmnm5_"}, {"kty": "oct", "use": "enc", "kid": "refresh", "k": "vrjoMrmgK8SmJJPc318zTxqG_tvBqF5l"}]}
\ No newline at end of file
+{"keys": [{"kty": "oct", "use": "enc", "kid": "code", "k": "vSHDkLBHhDStkR0NWu8519rmV5zmnm5_"}, {"kty": "oct", "use": "enc", "kid": "refresh", "k": "rJGcHkBJrCCUYp5k62ABrQuUeug_gmL6"}]}
\ No newline at end of file
diff --git a/tests/request123456.jwt b/tests/request123456.jwt
index fed3886..5338a28 100644
--- a/tests/request123456.jwt
+++ b/tests/request123456.jwt
@@ -1 +1 @@
-eyJhbGciOiJSUzI1NiIsImtpZCI6IlNIRXlZV2N3TlZrMExUZFJPVFp6WjJGVVduZElWWGRhY2sweFdVTTVTRXB3Y1MwM2RWVXhXVTR6UlEifQ.eyJyZXNwb25zZV90eXBlIjogImNvZGUiLCAic3RhdGUiOiAic3RhdGUiLCAicmVkaXJlY3RfdXJpIjogImh0dHBzOi8vZXhhbXBsZS5jb20vY2xpL2F1dGh6X2NiIiwgInNjb3BlIjogIm9wZW5pZCIsICJub25jZSI6ICJpcno4SG5ELXFsOVhNYVJYUll1S3BpcEpHM2hiRWZ5akxBYXQwMjNLZEdvIiwgImNsaWVudF9pZCI6ICJjbGllbnRfaWQiLCAiaXNzIjogImNsaWVudF9pZCIsICJpYXQiOiAxNzEwODM2MDQwLCAiYXVkIjogWyJodHRwczovL2V4YW1wbGUuY29tIl19.EDvgPn7QJFm6O4d9QFU9gVZEmAREDIfl1RTiMtec7_ZJ4vGag3dxCyXgz15GbDrQgo6mqCydCe-Mal_4HBlRwMctqhy9NMIGM5PxIKzrqMjsk88jxAoz-WWw3I-pKrJUS4m23mEgLZkGQpB1N3YgO_RhG-7vGCkiJd_8VuomRMd2dX5_Jax3j12T7vhM_TUI9S6XJ5zsLn2ZOPQVXfoprr7HHY6UJjJ65Fp_hoGA3gmfJiHwbxYss8D2X1BNoLmEMze_e6cS-DGe648t2U47E77BvHdzsKi791Y1L3eizkm364gJ371KWbi3avvbSkTi4hEd3OikkyeMQZk6vDiJww
\ No newline at end of file
+eyJhbGciOiJSUzI1NiIsImtpZCI6IlNIRXlZV2N3TlZrMExUZFJPVFp6WjJGVVduZElWWGRhY2sweFdVTTVTRXB3Y1MwM2RWVXhXVTR6UlEifQ.eyJyZXNwb25zZV90eXBlIjogImNvZGUiLCAic3RhdGUiOiAic3RhdGUiLCAicmVkaXJlY3RfdXJpIjogImh0dHBzOi8vZXhhbXBsZS5jb20vY2xpL2F1dGh6X2NiIiwgInNjb3BlIjogIm9wZW5pZCIsICJub25jZSI6ICIxcGNuQ3RTSHlrc1JwVzE4N2NWS2p0X2JjTUN0S0dGZzBOZTFyYlhlRXZzIiwgImNsaWVudF9pZCI6ICJjbGllbnRfaWQiLCAiZXhwIjogMTczMDM3NzA5MiwgImlzcyI6ICJjbGllbnRfaWQiLCAiaWF0IjogMTczMDM3MzQ5MiwgImF1ZCI6IFsicmVxdWVzdF91cmkiXSwgImp0aSI6ICI1NzUxZDhmNTVkYzU0OTE1OTI4MjhiMjM0M2YxZTMxZSJ9.k2D_v7jv9cFWIcB6I3HlUPnZg4Tx9FBANR4kPH16fh8cI-c_YFvbCfrXpwUOj1CUY4ZdFqtZnYQD8rQHtjqgXjF79X8H6V6c_7GjQSzHlSAPshFMGm4eXiDKfSCq1xu4YEC-qaub19JjqHpzq6y2Sfz1ayI5qdg_-yJap8HHoPSYzaZ_oPVP7u1TAP24fI15w_leSlgYuXFyzbCWlcWjoHxCJaxYobw3HrAJE4p9h5XL84Rth73xi918CuGw4ngWcF7aQg5dUc1HZPrefU0iVs7Rhi75GmkQzByx7kqIN0T1J-wUod7o69sIqrfWuccam3ndo5E8YlUvwXo0JwKlFQ
\ No newline at end of file
diff --git a/tests/test_04_message.py b/tests/test_04_message.py
index 7fe1878..a3c05b7 100644
--- a/tests/test_04_message.py
+++ b/tests/test_04_message.py
@@ -14,6 +14,7 @@ from cryptojwt.key_jar import build_keyjar
 from idpyoidc.exception import DecodeError
 from idpyoidc.exception import MessageException
 from idpyoidc.exception import OidcMsgError
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message import OPTIONAL_LIST_OF_MESSAGES
 from idpyoidc.message import OPTIONAL_LIST_OF_STRINGS
 from idpyoidc.message import OPTIONAL_MESSAGE
@@ -48,13 +49,13 @@ keym = [
 KEYJAR = build_keyjar(keys)
 
 IKEYJAR = build_keyjar(keys)
-IKEYJAR.import_jwks(IKEYJAR.export_jwks(private=True), "issuer")
+IKEYJAR = store_under_other_id(IKEYJAR, "", "issuer", True)
 del IKEYJAR[""]
 
 KEYJARS = {}
 for iss in ["A", "B", "C"]:
     _kj = build_keyjar(keym)
-    _kj.import_jwks(_kj.export_jwks(private=True), iss)
+    _kj = store_under_other_id(_kj, "", iss, True)
     del _kj[""]
     KEYJARS[iss] = _kj
 
diff --git a/tests/test_05_oauth2.py b/tests/test_05_oauth2.py
index fc187db..2cf892c 100644
--- a/tests/test_05_oauth2.py
+++ b/tests/test_05_oauth2.py
@@ -8,6 +8,7 @@ from cryptojwt.key_jar import build_keyjar
 
 from idpyoidc import verified_claim_name
 from idpyoidc.exception import MissingRequiredAttribute
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message import DecodeError
 from idpyoidc.message import json_deserializer
 from idpyoidc.message import json_serializer
@@ -44,10 +45,10 @@ keym = [
 ]
 
 KEYJAR = build_keyjar(keys)
-KEYJAR.import_jwks(KEYJAR.export_jwks(private=True), "issuer")
+KEYJAR = store_under_other_id(KEYJAR,"", "issuer", True)
 
 IKEYJAR = build_keyjar(keys)
-IKEYJAR.import_jwks(IKEYJAR.export_jwks(private=True), "issuer")
+IKEYJAR = store_under_other_id(IKEYJAR, "", "issuer", True)
 del IKEYJAR[""]
 
 
diff --git a/tests/test_07_session.py b/tests/test_07_session.py
index 94cbebd..b380635 100644
--- a/tests/test_07_session.py
+++ b/tests/test_07_session.py
@@ -10,6 +10,8 @@ from cryptojwt.key_jar import init_key_jar
 
 from idpyoidc.exception import MessageException
 from idpyoidc.exception import NotForMe
+from idpyoidc.key_import import import_jwks_as_json
+from idpyoidc.key_import import import_jwks_from_file
 from idpyoidc.message.oidc import Claims
 from idpyoidc.message.oidc import ClaimsRequest
 from idpyoidc.message.oidc import IdToken
@@ -64,8 +66,8 @@ ISS_KEY = init_key_jar(
     issuer_id=ISS,
 )
 
-ISS_KEY.import_jwks_as_json(open(full_path("pub_client.jwks")).read(), CLIENT_ID)
-CLI_KEY.import_jwks_as_json(open(full_path("pub_iss.jwks")).read(), ISS)
+ISS_KEY = import_jwks_from_file(ISS_KEY, full_path("pub_client.jwks"), CLIENT_ID)
+CLI_KEY = import_jwks_from_file(CLI_KEY, full_path("pub_iss.jwks"), ISS)
 
 
 class TestEndSessionResponse(object):
diff --git a/tests/test_08_transform.py b/tests/test_08_transform.py
index 71c83d9..33a2e14 100644
--- a/tests/test_08_transform.py
+++ b/tests/test_08_transform.py
@@ -4,12 +4,12 @@ import pytest
 from cryptojwt.utils import importer
 
 from idpyoidc.client.claims.oidc import Claims as OIDC_Claims
-from idpyoidc.client.claims.transform import create_registration_request
-from idpyoidc.client.claims.transform import preferred_to_registered
-from idpyoidc.client.claims.transform import supported_to_preferred
 from idpyoidc.message.oidc import APPLICATION_TYPE_WEB
 from idpyoidc.message.oidc import ProviderConfigurationResponse
 from idpyoidc.message.oidc import RegistrationRequest
+from idpyoidc.transform import create_registration_request
+from idpyoidc.transform import preferred_to_registered
+from idpyoidc.transform import supported_to_preferred
 
 
 class TestTransform:
@@ -42,117 +42,114 @@ class TestTransform:
 
     def test_supported(self):
         # These are all the available configuration parameters
-        assert set(self.supported.keys()) == {
-            "acr_values_supported",
-            "application_type",
-            "backchannel_logout_session_required",
-            "backchannel_logout_supported",
-            "backchannel_logout_uri",
-            "callback_uris",
-            "client_id",
-            "client_name",
-            "client_secret",
-            "client_uri",
-            "contacts",
-            "default_max_age",
-            "encrypt_id_token_supported",
-            "encrypt_request_object_supported",
-            "encrypt_userinfo_supported",
-            "frontchannel_logout_session_required",
-            "frontchannel_logout_supported",
-            "frontchannel_logout_uri",
-            "id_token_encryption_alg_values_supported",
-            "id_token_encryption_enc_values_supported",
-            "id_token_signing_alg_values_supported",
-            "initiate_login_uri",
-            "jwks",
-            "jwks_uri",
-            "logo_uri",
-            "policy_uri",
-            "post_logout_redirect_uris",
-            "redirect_uris",
-            "request_object_encryption_alg_values_supported",
-            "request_object_encryption_enc_values_supported",
-            "request_object_signing_alg_values_supported",
-            "request_parameter",
-            "request_parameter_supported",
-            "request_uri_parameter_supported",
-            "request_uris",
-            "requests_dir",
-            "require_auth_time",
-            "response_modes_supported",
-            "response_types_supported",
-            "scopes_supported",
-            "sector_identifier_uri",
-            "subject_types_supported",
-            # 'token_endpoint_auth_method',
-            "token_endpoint_auth_methods_supported",
-            "token_endpoint_auth_signing_alg_values_supported",
-            "tos_uri",
-            "userinfo_encryption_alg_values_supported",
-            "userinfo_encryption_enc_values_supported",
-            "userinfo_signing_alg_values_supported",
-        }
+        assert set(self.supported.keys()) == {'acr_values_supported',
+                                              'application_type',
+                                              'backchannel_logout_session_required',
+                                              'backchannel_logout_supported',
+                                              'backchannel_logout_uri',
+                                              'callback_uris',
+                                              'client_id',
+                                              'client_name',
+                                              'client_secret',
+                                              'client_uri',
+                                              'code_challenge_methods_supported',
+                                              'contacts',
+                                              'default_max_age',
+                                              'encrypt_id_token_supported',
+                                              'encrypt_request_object_supported',
+                                              'encrypt_userinfo_supported',
+                                              'frontchannel_logout_session_required',
+                                              'frontchannel_logout_supported',
+                                              'frontchannel_logout_uri',
+                                              'id_token_encryption_alg_values_supported',
+                                              'id_token_encryption_enc_values_supported',
+                                              'id_token_signing_alg_values_supported',
+                                              'initiate_login_uri',
+                                              'jwks',
+                                              'jwks_uri',
+                                              'logo_uri',
+                                              'policy_uri',
+                                              'post_logout_redirect_uris',
+                                              'redirect_uris',
+                                              'request_object_encryption_alg_values_supported',
+                                              'request_object_encryption_enc_values_supported',
+                                              'request_object_signing_alg_values_supported',
+                                              'request_parameter',
+                                              'request_parameter_supported',
+                                              'request_uri_parameter_supported',
+                                              'request_uris',
+                                              'requests_dir',
+                                              'require_auth_time',
+                                              'response_modes_supported',
+                                              'response_types_supported',
+                                              'scopes_supported',
+                                              'sector_identifier_uri',
+                                              'subject_types_supported',
+                                              'token_endpoint_auth_methods_supported',
+                                              'token_endpoint_auth_signing_alg_values_supported',
+                                              'tos_uri',
+                                              'userinfo_encryption_alg_values_supported',
+                                              'userinfo_encryption_enc_values_supported',
+                                              'userinfo_signing_alg_values_supported'}
 
     def test_oidc_setup(self):
         # This is OP specified stuff
         assert set(ProviderConfigurationResponse.c_param.keys()).difference(
             set(self.supported)
         ) == {
-            "authorization_endpoint",
-            "check_session_iframe",
-            "claim_types_supported",
-            "claims_locales_supported",
-            "claims_parameter_supported",
-            "claims_supported",
-            "display_values_supported",
-            "end_session_endpoint",
-            "error",
-            "error_description",
-            "error_uri",
-            "grant_types_supported",
-            "issuer",
-            "op_policy_uri",
-            "op_tos_uri",
-            "registration_endpoint",
-            "require_request_uri_registration",
-            "service_documentation",
-            "token_endpoint",
-            "ui_locales_supported",
-            "userinfo_endpoint",
-            "code_challenge_methods_supported",
-        }
+                   "authorization_endpoint",
+                   "check_session_iframe",
+                   "claim_types_supported",
+                   "claims_locales_supported",
+                   "claims_parameter_supported",
+                   "claims_supported",
+                   "display_values_supported",
+                   "end_session_endpoint",
+                   "error",
+                   "error_description",
+                   "error_uri",
+                   "grant_types_supported",
+                   "issuer",
+                   "op_policy_uri",
+                   "op_tos_uri",
+                   "registration_endpoint",
+                   "require_request_uri_registration",
+                   "service_documentation",
+                   "token_endpoint",
+                   "ui_locales_supported",
+                   "userinfo_endpoint",
+               }
 
         # parameters that are not mapped against what the OP's provider info says
         assert set(self.supported).difference(
             set(ProviderConfigurationResponse.c_param.keys())
         ) == {
-            "application_type",
-            "backchannel_logout_uri",
-            "callback_uris",
-            "client_id",
-            "client_name",
-            "client_secret",
-            "client_uri",
-            "contacts",
-            "default_max_age",
-            "encrypt_id_token_supported",
-            "encrypt_request_object_supported",
-            "encrypt_userinfo_supported",
-            "frontchannel_logout_uri",
-            "initiate_login_uri",
-            "jwks",
-            "logo_uri",
-            "policy_uri",
-            "post_logout_redirect_uris",
-            "redirect_uris",
-            "request_parameter",
-            "request_uris",
-            "requests_dir",
-            "require_auth_time",
-            "sector_identifier_uri",
-            "tos_uri",
-        }
+                   "application_type",
+                   "backchannel_logout_uri",
+                   "callback_uris",
+                   "client_id",
+                   "client_name",
+                   "client_secret",
+                   "client_uri",
+                   "contacts",
+                   "default_max_age",
+                   "encrypt_id_token_supported",
+                   "encrypt_request_object_supported",
+                   "encrypt_userinfo_supported",
+                   "frontchannel_logout_uri",
+                   "initiate_login_uri",
+                   "jwks",
+                   "logo_uri",
+                   "policy_uri",
+                   "post_logout_redirect_uris",
+                   "redirect_uris",
+                   "request_parameter",
+                   "request_uris",
+                   "requests_dir",
+                   "require_auth_time",
+                   "sector_identifier_uri",
+                   "tos_uri",
+               }
 
         claims = OIDC_Claims()
         # No input from the IDP so info is absent
@@ -173,6 +170,7 @@ class TestTransform:
             "request_object_encryption_alg_values_supported",
             "request_object_encryption_enc_values_supported",
             "request_object_signing_alg_values_supported",
+            "request_parameter_supported",
             "response_modes_supported",
             "response_types_supported",
             "scopes_supported",
@@ -245,27 +243,24 @@ class TestTransform:
         )
 
         # These are the claims that has default values
-        assert set(claims.prefer.keys()) == {
-            "application_type",
-            "default_max_age",
-            "encrypt_request_object_supported",
-            "encrypt_userinfo_supported",
-            "id_token_encryption_alg_values_supported",
-            "id_token_encryption_enc_values_supported",
-            "id_token_signing_alg_values_supported",
-            "request_object_encryption_alg_values_supported",
-            "request_object_encryption_enc_values_supported",
-            "request_object_signing_alg_values_supported",
-            "response_modes_supported",
-            "response_types_supported",
-            "scopes_supported",
-            "subject_types_supported",
-            "token_endpoint_auth_methods_supported",
-            "token_endpoint_auth_signing_alg_values_supported",
-            "userinfo_encryption_alg_values_supported",
-            "userinfo_encryption_enc_values_supported",
-            "userinfo_signing_alg_values_supported",
-        }
+        assert set(claims.prefer.keys()) == {'application_type',
+                                             'default_max_age',
+                                             'id_token_encryption_alg_values_supported',
+                                             'id_token_encryption_enc_values_supported',
+                                             'id_token_signing_alg_values_supported',
+                                             'request_object_encryption_alg_values_supported',
+                                             'request_object_encryption_enc_values_supported',
+                                             'request_object_signing_alg_values_supported',
+                                             'request_parameter_supported',
+                                             'response_modes_supported',
+                                             'response_types_supported',
+                                             'scopes_supported',
+                                             'subject_types_supported',
+                                             'token_endpoint_auth_methods_supported',
+                                             'token_endpoint_auth_signing_alg_values_supported',
+                                             'userinfo_encryption_alg_values_supported',
+                                             'userinfo_encryption_enc_values_supported',
+                                             'userinfo_signing_alg_values_supported'}
 
         # least common denominator
         # The RP supports less than the OP
@@ -362,10 +357,13 @@ class TestTransform2:
             "client_name",
             "contacts",
             "default_max_age",
+            'encrypt_request_object_supported',
+            'encrypt_userinfo_supported',
             "id_token_signed_response_alg",
             "logo_uri",
             "redirect_uris",
             "request_object_signing_alg",
+            'request_parameter_supported',
             "response_types",
             "response_modes",  # non-standard
             "subject_type",
@@ -402,29 +400,28 @@ class TestTransform2:
             registration_response=registration_response,
         )
 
-        assert set(to_use.keys()) == {
-            "application_type",
-            "client_name",
-            "contacts",
-            "default_max_age",
-            "encrypt_request_object_supported",
-            "encrypt_userinfo_supported",
-            "id_token_signed_response_alg",
-            "jwks_uri",
-            "logo_uri",
-            "redirect_uris",
-            "request_object_signing_alg",
-            "request_uris",
-            "response_types",
-            "response_modes",  # non-standard
-            "scope",
-            "sector_identifier_uri",
-            "subject_type",
-            "token_endpoint_auth_method",
-            "token_endpoint_auth_signing_alg",
-            "userinfo_encrypted_response_alg",
-            "userinfo_encrypted_response_enc",
-            "userinfo_signed_response_alg",
-        }
+        assert set(to_use.keys()) == {'application_type',
+                                      'client_name',
+                                      'contacts',
+                                      'default_max_age',
+                                      'id_token_signed_response_alg',
+                                      'jwks_uri',
+                                      'logo_uri',
+                                      'redirect_uris',
+                                      'request_object_signing_alg',
+                                      'request_uris',
+                                      'encrypt_userinfo_supported',
+                                      'request_parameter_supported',
+                                      'encrypt_request_object_supported',
+                                      'response_modes',
+                                      'response_types',
+                                      'scope',
+                                      'sector_identifier_uri',
+                                      'subject_type',
+                                      'token_endpoint_auth_method',
+                                      'token_endpoint_auth_signing_alg',
+                                      'userinfo_encrypted_response_alg',
+                                      'userinfo_encrypted_response_enc',
+                                      'userinfo_signed_response_alg'}
 
         assert to_use["subject_type"] == "pairwise"
diff --git a/tests/test_09_work_condition.py b/tests/test_09_work_condition.py
index 957d857..34dd006 100644
--- a/tests/test_09_work_condition.py
+++ b/tests/test_09_work_condition.py
@@ -4,9 +4,10 @@ import pytest as pytest
 from cryptojwt.utils import importer
 
 from idpyoidc.client.claims.oidc import Claims
-from idpyoidc.client.claims.transform import create_registration_request
-from idpyoidc.client.claims.transform import preferred_to_registered
-from idpyoidc.client.claims.transform import supported_to_preferred
+from idpyoidc.message.oidc import RegistrationRequest
+from idpyoidc.transform import create_registration_request
+from idpyoidc.transform import preferred_to_registered
+from idpyoidc.transform import supported_to_preferred
 from idpyoidc.message.oidc import APPLICATION_TYPE_WEB
 
 KEYSPEC = [
@@ -168,14 +169,14 @@ class TestWorkEnvironment:
             "acr_values_supported": ["mfa"],
         }
 
-        pref = self.claims.prefer = supported_to_preferred(
+        self.claims.prefer = supported_to_preferred(
             supported=self.supported,
             preference=self.claims.prefer,
             base_url="https://example.com",
             info=provider_info_response,
         )
 
-        registration_request = create_registration_request(self.claims.prefer, self.supported)
+        registration_request = self.claims.get_client_metadata(metadata_schema=RegistrationRequest)
 
         assert set(registration_request.keys()) == {
             "application_type",
@@ -230,8 +231,8 @@ class TestWorkEnvironment:
             "client_secret",
             "contacts",
             "default_max_age",
-            "encrypt_request_object_supported",
-            "encrypt_userinfo_supported",
+            'encrypt_userinfo_supported',
+            'encrypt_request_object_supported',
             "id_token_signed_response_alg",
             "jwks",
             "jwks_uri",
@@ -239,6 +240,7 @@ class TestWorkEnvironment:
             "redirect_uris",
             "request_object_signing_alg",
             "request_uris",
+            'request_parameter_supported',
             "response_modes",
             "response_types",
             "scope",
@@ -313,7 +315,7 @@ class TestWorkEnvironment:
             info=provider_info_response,
         )
 
-        registration_request = create_registration_request(self.claims.prefer, self.supported)
+        registration_request = self.claims.get_client_metadata(metadata_schema=RegistrationRequest)
 
         assert set(registration_request.keys()) == {
             "application_type",
@@ -376,6 +378,7 @@ class TestWorkEnvironment:
             "logo_uri",
             "redirect_uris",
             "request_object_signing_alg",
+            'request_parameter_supported',
             "request_uris",
             "response_modes",
             "response_types",
diff --git a/tests/test_11_impexp.py b/tests/test_11_impexp.py
index 3f525b1..14e1e4e 100644
--- a/tests/test_11_impexp.py
+++ b/tests/test_11_impexp.py
@@ -94,3 +94,27 @@ def test_flush():
     assert len(b.bundles) == 2
     for kb in b.bundles:
         assert isinstance(kb, KeyBundle)
+
+
+def test_dict():
+    b = ImpExpTest()
+    b.string = "foo"
+    b.list = ["a", "b", "c"]
+    b.dict = {"a": 1, "b": 2}
+    b.message = {
+        "scope": "openid",
+        "redirect_uri": "https://example.com/cb",
+        "response_type": "code",
+        "client_id": "abcdefg",
+    }
+
+    dump = b.dump()
+
+    b.flush()
+
+    b.load(dump)
+
+    assert b.string == "foo"
+    assert b.list == ["a", "b", "c"]
+    assert b.dict == {"a": 1, "b": 2}
+    assert isinstance(b.message, AuthorizationRequest)
diff --git a/tests/test_14_read_only_list_file.py b/tests/test_14_read_only_list_file.py
index 2abdf9e..fd30b9d 100644
--- a/tests/test_14_read_only_list_file.py
+++ b/tests/test_14_read_only_list_file.py
@@ -24,6 +24,4 @@ def test_read_only_list_file():
             fp.write(line + '\n')
 
     # sleep(2)
-    # assert _read_only.is_changed(FILE_NAME) is True
     assert set(_read_only) == {"one", "two", "three"}
-    assert _read_only[-1] == "three"
\ No newline at end of file
diff --git a/tests/test_20_config.py b/tests/test_20_config.py
index ad737ec..3f6b27a 100644
--- a/tests/test_20_config.py
+++ b/tests/test_20_config.py
@@ -172,14 +172,12 @@ def test_init_crypto_keys():
         "keys": {
             "private_path": "private/cookie_jwks.json",
             "key_defs": [
-                {"type": "OCT", "use": ["enc"], "kid": "enc"},
-                {"type": "OCT", "use": ["sig"], "kid": "sig"},
+                {"type": "OCT", "use": ["enc"], "kid": "key", "bytes": 32},
             ],
             "read_only": False,
         }
     }
     _res = init_encrypter(_conf)
     assert _res["conf"]["class"] == DEFAULT_CRYPTO
-    assert set(_res["conf"]["kwargs"].keys()) == {"password", "salt"}
-    assert "password" in _res["conf"]["kwargs"]
-    assert "salt" in _res["conf"]["kwargs"]
+    assert set(_res["conf"]["kwargs"].keys()) == {"key", "salt"}
+    assert len(_res["conf"]["kwargs"]["salt"]) == 16
diff --git a/tests/test_21_abfile_no_cache.py b/tests/test_21_abfile_no_cache.py
new file mode 100644
index 0000000..cfe7e86
--- /dev/null
+++ b/tests/test_21_abfile_no_cache.py
@@ -0,0 +1,116 @@
+import os
+import shutil
+
+import pytest
+
+from idpyoidc.impexp import ImpExp
+from idpyoidc.storage.abfile_no_cache import AbstractFileSystemNoCache
+
+BASEDIR = os.path.abspath(os.path.dirname(__file__))
+
+
+def full_path(local_file):
+    return os.path.join(BASEDIR, local_file)
+
+
+CLIENT_1 = {
+    "client_secret": "hemligtkodord",
+    "redirect_uris": [["https://example.com/cb", ""]],
+    "client_salt": "salted",
+    "token_endpoint_auth_method": "client_secret_post",
+    "response_types": ["code", "token"],
+}
+
+CLIENT_2 = {
+    "client_secret": "spraket",
+    "redirect_uris": [["https://app1.example.net/foo", ""], ["https://app2.example.net/bar", ""]],
+    "response_types": ["code"],
+}
+
+
+class ImpExpTest(ImpExp):
+    parameter = {
+        "string": "",
+        "list": [],
+        "dict": "DICT_TYPE",
+    }
+
+
+class TestAFS(object):
+    @pytest.fixture(autouse=True)
+    def setup(self):
+        filename = full_path("afs")
+        if os.path.isdir(filename):
+            shutil.rmtree(filename)
+
+    def test_create_cdb(self):
+        abf = AbstractFileSystemNoCache(fdir=full_path("afs"), value_conv="idpyoidc.util.JSON")
+
+        # add a client
+
+        abf["client_1"] = CLIENT_1
+
+        assert list(abf.keys()) == ["client_1"]
+
+        # add another one
+
+        abf["client_2"] = CLIENT_2
+
+        assert set(abf.keys()) == {"client_1", "client_2"}
+
+    def test_read_cdb(self):
+        abf = AbstractFileSystemNoCache(fdir=full_path("afs"), value_conv="idpyoidc.util.JSON")
+        # add a client
+        abf["client_1"] = CLIENT_1
+        # add another one
+        abf["client_2"] = CLIENT_2
+
+        afs_2 = AbstractFileSystemNoCache(fdir=full_path("afs"), value_conv="idpyoidc.util.JSON")
+        assert set(afs_2.keys()) == {"client_1", "client_2"}
+
+    def test_dump_load_afs(self):
+        b = ImpExpTest()
+        b.string = "foo"
+        b.list = ["a", "b", "c"]
+        b.dict = AbstractFileSystemNoCache(fdir=full_path("afs"), value_conv="idpyoidc.util.JSON")
+
+        # add a client
+        b.dict["client_1"] = CLIENT_1
+        # add another one
+        b.dict["client_2"] = CLIENT_2
+
+        dump = b.dump()
+
+        b_copy = ImpExpTest().load(dump)
+        assert b_copy
+        assert isinstance(b_copy.dict, AbstractFileSystemNoCache)
+        assert set(b_copy.dict.keys()) == {"client_1", "client_2"}
+
+    def test_dump_load_dict(self):
+        b = ImpExpTest()
+        b.string = "foo"
+        b.list = ["a", "b", "c"]
+        b.dict = {"a": 1, "b": 2, "c": 3}
+
+        dump = b.dump()
+
+        b_copy = ImpExpTest().load(dump)
+        assert b_copy
+        assert isinstance(b_copy.dict, dict)
+
+    def test_get(self):
+        abf = AbstractFileSystemNoCache(fdir=full_path("afs"), value_conv="idpyoidc.util.JSON")
+        # add a client
+        abf["client_1"] = CLIENT_1
+        # add another one
+        abf["client_2"] = CLIENT_2
+
+        val = abf["client_2"]
+        assert val == CLIENT_2
+
+        del abf["client_2"]
+
+        assert set(abf.keys()) == {"client_1"}
+
+        abf.clear()
+        assert set(abf.keys()) == set()
diff --git a/tests/test_client_02_entity.py b/tests/test_client_02_entity.py
index 369ef7f..0598146 100644
--- a/tests/test_client_02_entity.py
+++ b/tests/test_client_02_entity.py
@@ -39,7 +39,7 @@ class TestEntity:
         assert _srv is None
 
     def test_get_client_id(self):
-        assert self.entity.get_service_context().get_preference("client_id") == "Number5"
+        assert self.entity.client_id == "Number5"
         assert self.entity.get_attribute("client_id") == "Number5"
 
     def test_get_service_by_endpoint_name(self):
diff --git a/tests/test_client_02b_entity_metadata.py b/tests/test_client_02b_entity_metadata.py
index 8f122a5..16002e4 100644
--- a/tests/test_client_02b_entity_metadata.py
+++ b/tests/test_client_02b_entity_metadata.py
@@ -74,6 +74,7 @@ def test_create_client():
         "redirect_uris",
         "request_object_signing_alg_values_supported",
         "request_parameter",
+        "request_parameter_supported",
         "response_modes_supported",
         "response_types_supported",
         "scopes_supported",
@@ -95,7 +96,7 @@ def test_create_client():
 
     _conf_args = list(_context.collect_usage().keys())
     assert _conf_args
-    assert len(_conf_args) == 23
+    assert len(_conf_args) == 24
     rr = set(RegistrationRequest.c_param.keys())
     # The ones that are not defined and will therefore not appear in a registration request
     d = rr.difference(set(_conf_args))
@@ -146,3 +147,28 @@ def test_create_client_jwks_uri():
     client_config["jwks_uri"] = "https://rp.example.com/jwks_uri.json"
     client = Entity(config=client_config)
     assert client.get_service_context().get_preference("jwks_uri")
+
+
+def test_metadata():
+    client = Entity(config=CLIENT_CONFIG, client_type="oidc")
+    # With entity type
+    metadata = client.context.claims.get_client_metadata("openid_relying_party",
+                                                  metadata_schema=RegistrationRequest)
+    assert set(metadata.keys()) == {"openid_relying_party"}
+    # Without entity type, no endpoints. Typical client
+    metadata = client.context.claims.get_client_metadata(metadata_schema=RegistrationRequest)
+    assert set(metadata.keys()) == {'application_type',
+                                    'backchannel_logout_session_required',
+                                    'backchannel_logout_uri',
+                                    'contacts',
+                                    'default_max_age',
+                                    'grant_types',
+                                    'id_token_signed_response_alg',
+                                    'redirect_uris',
+                                    'request_object_signing_alg',
+                                    'response_modes',
+                                    'response_types',
+                                    'subject_type',
+                                    'token_endpoint_auth_method',
+                                    'token_endpoint_auth_signing_alg',
+                                    'userinfo_signed_response_alg'}
diff --git a/tests/test_client_04_service.py b/tests/test_client_04_service.py
index 95e0934..2eec542 100644
--- a/tests/test_client_04_service.py
+++ b/tests/test_client_04_service.py
@@ -62,6 +62,7 @@ class TestService:
             "jwks",
             "redirect_uris",
             "request_object_signing_alg",
+            'request_parameter_supported',
             "response_modes",
             "response_types",
             "scope",
diff --git a/tests/test_client_05_util.py b/tests/test_client_05_util.py
index 3a22416..057c954 100644
--- a/tests/test_client_05_util.py
+++ b/tests/test_client_05_util.py
@@ -7,6 +7,7 @@ from urllib.parse import urlsplit
 import pytest
 
 from idpyoidc.client.exception import WrongContentType
+from idpyoidc.client.util import get_content_type
 from idpyoidc.client.util import get_deserialization_method
 from idpyoidc.client.util import get_http_body
 from idpyoidc.client.util import get_http_url
@@ -139,28 +140,35 @@ def test_verify_header():
 
 def test_get_deserialization_method_json():
     resp = FakeResponse("application/json")
-    assert get_deserialization_method(resp) == "json"
+    ctype = get_content_type(resp)
+    assert get_deserialization_method(ctype) == "json"
 
     resp = FakeResponse("application/json; charset=utf-8")
-    assert get_deserialization_method(resp) == "json"
+    ctype = get_content_type(resp)
+    assert get_deserialization_method(ctype) == "json"
 
     resp.headers["content-type"] = "application/jrd+json"
-    assert get_deserialization_method(resp) == "json"
+    ctype = get_content_type(resp)
+    assert get_deserialization_method(ctype) == "json"
 
 
 def test_get_deserialization_method_jwt():
     resp = FakeResponse("application/jwt")
-    assert get_deserialization_method(resp) == "jwt"
+    ctype = get_content_type(resp)
+    assert get_deserialization_method(ctype) == "jwt"
 
 
 def test_get_deserialization_method_urlencoded():
     resp = FakeResponse(URL_ENCODED)
-    assert get_deserialization_method(resp) == "urlencoded"
+    ctype = get_content_type(resp)
+    assert get_deserialization_method(ctype) == "urlencoded"
 
 
 def test_get_deserialization_method_text():
     resp = FakeResponse("text/html")
-    assert get_deserialization_method(resp) == ""
+    ctype = get_content_type(resp)
+    assert get_deserialization_method(ctype) == ""
 
     resp = FakeResponse("text/plain")
-    assert get_deserialization_method(resp) == ""
+    ctype = get_content_type(resp)
+    assert get_deserialization_method(ctype) == ""
diff --git a/tests/test_client_06_client_authn.py b/tests/test_client_06_client_authn.py
index 52fb95c..6a42ae5 100644
--- a/tests/test_client_06_client_authn.py
+++ b/tests/test_client_06_client_authn.py
@@ -3,26 +3,28 @@ import os
 
 import pytest
 from cryptojwt.exception import MissingKey
-from cryptojwt.jws.jws import JWS
 from cryptojwt.jws.jws import factory
+from cryptojwt.jws.jws import JWS
 from cryptojwt.jwt import JWT
 from cryptojwt.key_bundle import KeyBundle
-from cryptojwt.key_jar import KeyJar
 from cryptojwt.key_jar import init_key_jar
+from cryptojwt.key_jar import KeyJar
 
 from idpyoidc.claims import Claims
+from idpyoidc.client.client_auth import assertion_jwt
 from idpyoidc.client.client_auth import AuthnFailure
+from idpyoidc.client.client_auth import bearer_auth
 from idpyoidc.client.client_auth import BearerBody
 from idpyoidc.client.client_auth import BearerHeader
 from idpyoidc.client.client_auth import ClientSecretBasic
 from idpyoidc.client.client_auth import ClientSecretJWT
 from idpyoidc.client.client_auth import ClientSecretPost
 from idpyoidc.client.client_auth import PrivateKeyJWT
-from idpyoidc.client.client_auth import assertion_jwt
-from idpyoidc.client.client_auth import bearer_auth
 from idpyoidc.client.client_auth import valid_service_context
 from idpyoidc.client.entity import Entity
 from idpyoidc.defaults import JWT_BEARER
+from idpyoidc.key_import import add_kb
+from idpyoidc.key_import import import_jwks
 from idpyoidc.message import Message
 from idpyoidc.message.oauth2 import AccessTokenRequest
 from idpyoidc.message.oauth2 import AccessTokenResponse
@@ -88,12 +90,13 @@ def test_quote():
     )
 
     assert (
-        http_args["headers"]["Authorization"] == "Basic "
-        "Nzk2ZDhmYWUtYTQyZi00ZTRmLWFiMjUtZDYyMDViNmQ0ZmEyOk1LRU0vQTdQa243SnVVMExBY3h5SFZLdndkY3pzdWdhUFUwQmllTGI0Q2JRQWdRait5cGNhbkZPQ2IwL0ZBNWg="
+            http_args["headers"]["Authorization"] == "Basic "
+                                                     "Nzk2ZDhmYWUtYTQyZi00ZTRmLWFiMjUtZDYyMDViNmQ0ZmEyOk1LRU0vQTdQa243SnVVMExBY3h5SFZLdndkY3pzdWdhUFUwQmllTGI0Q2JRQWdRait5cGNhbkZPQ2IwL0ZBNWg="
     )
 
 
 class TestClientSecretBasic(object):
+
     def test_construct(self, entity):
         _service = entity.get_service("")
         request = _service.construct(
@@ -127,6 +130,7 @@ class TestClientSecretBasic(object):
 
 
 class TestBearerHeader(object):
+
     def test_construct(self, entity):
         request = ResourceRequest(access_token="Sesame")
         bh = BearerHeader()
@@ -196,6 +200,7 @@ class TestBearerHeader(object):
 
 
 class TestBearerBody(object):
+
     def test_construct(self, entity):
         _token_service = entity.get_service("")
         request = ResourceRequest(access_token="Sesame")
@@ -252,6 +257,7 @@ class TestBearerBody(object):
 
 
 class TestClientSecretPost(object):
+
     def test_construct(self, entity):
         _token_service = entity.get_service("")
         request = _token_service.construct(
@@ -292,6 +298,7 @@ class TestClientSecretPost(object):
 
 
 class TestPrivateKeyJWT(object):
+
     def test_construct(self, entity):
         token_service = entity.get_service("")
         kb_rsa = KeyBundle(
@@ -320,8 +327,8 @@ class TestPrivateKeyJWT(object):
 
         # Receiver
         _kj = KeyJar()
-        _kj.import_jwks(_keyjar.export_jwks(), issuer_id=_context.get_client_id())
-        _kj.add_kb(_context.get_client_id(), kb_rsa)
+        _kj = import_jwks(_kj, _keyjar.export_jwks(), _context.get_client_id())
+        _kj = add_kb(_kj, kb_rsa, _context.get_client_id())
         jso = JWT(key_jar=_kj).unpack(cas)
         assert _eq(jso.keys(), ["aud", "iss", "sub", "jti", "exp", "iat"])
         # assert _jwt.headers == {'alg': 'RS256'}
@@ -350,6 +357,7 @@ class TestPrivateKeyJWT(object):
 
 
 class TestClientSecretJWT_TE(object):
+
     def test_client_secret_jwt(self, entity):
         _service_context = entity.get_context()
         _service_context.token_endpoint = "https://example.com/token"
@@ -487,6 +495,7 @@ class TestClientSecretJWT_TE(object):
 
 
 class TestClientSecretJWT_UI(object):
+
     def test_client_secret_jwt(self, entity):
         access_token_service = entity.get_service("")
 
@@ -526,6 +535,7 @@ class TestClientSecretJWT_UI(object):
 
 
 class TestValidClientInfo(object):
+
     def test_valid_service_context(self, entity):
         _service_context = entity.get_context()
 
diff --git a/tests/test_client_16_util.py b/tests/test_client_16_util.py
index a09d65a..57c4bf6 100644
--- a/tests/test_client_16_util.py
+++ b/tests/test_client_16_util.py
@@ -12,6 +12,7 @@ from idpyoidc.client import util
 from idpyoidc.client.exception import WrongContentType
 from idpyoidc.client.util import JSON_ENCODED
 from idpyoidc.client.util import URL_ENCODED
+from idpyoidc.client.util import get_content_type
 from idpyoidc.client.util import get_deserialization_method
 from idpyoidc.message.oauth2 import AccessTokenRequest
 from idpyoidc.message.oauth2 import AuthorizationRequest
@@ -145,31 +146,38 @@ def test_verify_header():
 
 def test_get_deserialization_method_json():
     resp = FakeResponse("application/json")
-    assert get_deserialization_method(resp) == "json"
+    ctype = get_content_type(resp)
+    assert get_deserialization_method(ctype) == "json"
 
     resp = FakeResponse("application/json; charset=utf-8")
-    assert get_deserialization_method(resp) == "json"
+    ctype = get_content_type(resp)
+    assert get_deserialization_method(ctype) == "json"
 
     resp.headers["content-type"] = "application/jrd+json"
-    assert get_deserialization_method(resp) == "json"
+    ctype = get_content_type(resp)
+    assert get_deserialization_method(ctype) == "json"
 
 
 def test_get_deserialization_method_jwt():
     resp = FakeResponse("application/jwt")
-    assert get_deserialization_method(resp) == "jwt"
+    ctype = get_content_type(resp)
+    assert get_deserialization_method(ctype) == "jwt"
 
 
 def test_get_deserialization_method_urlencoded():
     resp = FakeResponse(URL_ENCODED)
-    assert get_deserialization_method(resp) == "urlencoded"
+    ctype = get_content_type(resp)
+    assert get_deserialization_method(ctype) == "urlencoded"
 
 
 def test_get_deserialization_method_text():
     resp = FakeResponse("text/html")
-    assert get_deserialization_method(resp) == ""
+    ctype = get_content_type(resp)
+    assert get_deserialization_method(ctype) == ""
 
     resp = FakeResponse("text/plain")
-    assert get_deserialization_method(resp) == ""
+    ctype = get_content_type(resp)
+    assert get_deserialization_method(ctype) == ""
 
 
 def test_verify_no_content_type():
diff --git a/tests/test_client_20_oauth2.py b/tests/test_client_20_oauth2.py
index 5e5df3f..336ba13 100644
--- a/tests/test_client_20_oauth2.py
+++ b/tests/test_client_20_oauth2.py
@@ -191,6 +191,6 @@ class TestClient2(object):
 
     def test_keyjar(self):
         _keyjar = self.client.get_attribute("keyjar")
-        assert len(_keyjar) == 2  # one issuer
-        assert len(_keyjar[""]) == 3
-        assert len(_keyjar.get("sig")) == 3
+        assert len(_keyjar) == 1  #
+        assert len(_keyjar[""]) == 2
+        assert len(_keyjar.get("sig")) == 2
diff --git a/tests/test_client_21_oidc_service.py b/tests/test_client_21_oidc_service.py
index 5eba310..ca1dfb6 100644
--- a/tests/test_client_21_oidc_service.py
+++ b/tests/test_client_21_oidc_service.py
@@ -1,19 +1,22 @@
 import os
 
+import pytest
+import responses
 from cryptojwt.exception import UnsupportedAlgorithm
 from cryptojwt.jws import jws
 from cryptojwt.jws.utils import left_hash
 from cryptojwt.jwt import JWT
 from cryptojwt.key_jar import build_keyjar
 from cryptojwt.key_jar import init_key_jar
-import pytest
-import responses
 
 from idpyoidc.client.defaults import DEFAULT_OIDC_SERVICES
 from idpyoidc.client.entity import Entity
 from idpyoidc.client.exception import ParameterError
 from idpyoidc.client.oidc.registration import response_types_to_grant_types
 from idpyoidc.exception import MissingRequiredAttribute
+from idpyoidc.key_import import import_jwks
+from idpyoidc.key_import import import_jwks_from_file
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message.oidc import AccessTokenRequest
 from idpyoidc.message.oidc import AccessTokenResponse
 from idpyoidc.message.oidc import APPLICATION_TYPE_WEB
@@ -30,6 +33,7 @@ from idpyoidc.message.oidc.session import EndSessionRequest
 
 
 class Response(object):
+
     def __init__(self, status_code, text, headers=None):
         self.status_code = status_code
         self.text = text
@@ -45,15 +49,19 @@ _dirname = os.path.dirname(os.path.abspath(__file__))
 
 ISS = "https://example.com"
 
-ISS_KEY = init_key_jar(
-    public_path="{}/pub_iss.jwks".format(_dirname),
-    private_path="{}/priv_iss.jwks".format(_dirname),
-    key_defs=KEYSPEC,
-    issuer_id=ISS,
-    read_only=False,
-)
-
-ISS_KEY.import_jwks_as_json(open("{}/pub_client.jwks".format(_dirname)).read(), "client_id")
+# Issuers keys
+def issuers_keyjar(): 
+    _keyjar = init_key_jar(
+        public_path="{}/pub_iss.jwks".format(_dirname),
+        private_path="{}/priv_iss.jwks".format(_dirname),
+        key_defs=KEYSPEC,
+        issuer_id=ISS,
+        read_only=False,
+    )
+    
+    # add clients keys
+    _keyjar = import_jwks_from_file(_keyjar, f"{_dirname}/pub_client.jwks", "client_id")
+    return _keyjar
 
 
 def make_keyjar():
@@ -64,12 +72,12 @@ def make_keyjar():
         issuer_id="client_id",
         read_only=False,
     )
-    _keyjar.import_jwks(_keyjar.export_jwks(private=True, issuer_id="client_id"), issuer_id="")
-    _keyjar.import_jwks_as_json(open("{}/pub_iss.jwks".format(_dirname)).read(), ISS)
+    _keyjar = store_under_other_id(_keyjar, "client_id", "", True)
     return _keyjar
 
 
 class TestAuthorization(object):
+
     @pytest.fixture(autouse=True)
     def create_request(self):
         client_config = {
@@ -94,6 +102,8 @@ class TestAuthorization(object):
         _context.issuer = "https://example.com"
         _context.map_supported_to_preferred()
         _context.map_preferred_to_registered()
+        # Add the servers keys
+        _context.keyjar = import_jwks_from_file(_context.keyjar, f"{_dirname}/pub_iss.jwks", ISS)
         self.context = _context
         self.service = entity.get_service("authorization")
 
@@ -201,7 +211,7 @@ class TestAuthorization(object):
         _jws = jws.factory(msg["request"])
         assert _jws
         _resp = _jws.verify_compact(
-            msg["request"], keys=ISS_KEY.get_signing_key(key_type="RSA", issuer_id="client_id")
+            msg["request"], keys=issuers_keyjar().get_signing_key(key_type="RSA", issuer_id="client_id")
         )
         assert _resp
         assert set(_resp.keys()) == {
@@ -214,6 +224,8 @@ class TestAuthorization(object):
             "iss",
             "aud",
             "iat",
+            "jti",
+            "exp"
         }
 
     def test_request_param(self):
@@ -245,7 +257,7 @@ class TestAuthorization(object):
         self.service.endpoint = "https://example.com/authorize"
         _info = self.service.get_request_parameters(request_args=req_args)
         # Build an ID Token
-        idt = JWT(key_jar=ISS_KEY, iss=ISS, lifetime=3600)
+        idt = JWT(key_jar=issuers_keyjar(), iss=ISS, lifetime=3600)
         payload = {"sub": "123456789", "aud": ["client_id"], "nonce": "nonce"}
         # have to calculate c_hash
         alg = "RS256"
@@ -262,7 +274,7 @@ class TestAuthorization(object):
         self.service.endpoint = "https://example.com/authorize"
         _info = self.service.get_request_parameters(request_args=req_args)
         # Build an ID Token
-        idt = JWT(ISS_KEY, iss=ISS, lifetime=3600)
+        idt = JWT(issuers_keyjar(), iss=ISS, lifetime=3600)
         payload = {"sub": "123456789", "aud": ["client_id"], "nonce": "noice"}
         # have to calculate c_hash
         alg = "RS256"
@@ -279,7 +291,7 @@ class TestAuthorization(object):
         self.service.endpoint = "https://example.com/authorize"
         self.service.get_request_parameters(request_args=req_args)
         # Build an ID Token
-        idt = JWT(ISS_KEY, iss=ISS, lifetime=3600)
+        idt = JWT(issuers_keyjar(), iss=ISS, lifetime=3600)
         payload = {"sub": "123456789", "aud": ["client_id"]}
         # have to calculate c_hash
         alg = "RS256"
@@ -297,7 +309,7 @@ class TestAuthorization(object):
         self.service.endpoint = "https://example.com/authorize"
         self.service.get_request_parameters(request_args=req_args)
         # Build an ID Token
-        idt = JWT(ISS_KEY, iss=ISS, lifetime=3600, sign_alg="none")
+        idt = JWT(issuers_keyjar(), iss=ISS, lifetime=3600, sign_alg="none")
         payload = {"sub": "123456789", "aud": ["client_id"], "nonce": req_args["nonce"]}
         _idt = idt.pack(payload)
         self.service.upstream_get("context").claims.set_usage(
@@ -312,6 +324,7 @@ class TestAuthorization(object):
 
 
 class TestAuthorizationCallback(object):
+
     @pytest.fixture(autouse=True)
     def create_request(self):
         client_config = {
@@ -335,7 +348,7 @@ class TestAuthorizationCallback(object):
         _context.issuer = "https://example.com"
         _context.map_supported_to_preferred()
         _context.map_preferred_to_registered()
-
+        _context.keyjar = import_jwks_from_file(_context.keyjar, f"{_dirname}/pub_iss.jwks", ISS)
         self.service = entity.get_service("authorization")
 
     def test_construct_code(self):
@@ -397,6 +410,7 @@ class TestAuthorizationCallback(object):
 
 
 class TestAccessTokenRequest(object):
+
     @pytest.fixture(autouse=True)
     def create_request(self):
         client_config = {
@@ -410,6 +424,7 @@ class TestAccessTokenRequest(object):
         _context.issuer = "https://example.com"
         _context.provider_info = {"token_endpoint": f"{_context.issuer}/token"}
         self.service = entity.get_service("accesstoken")
+        _context.keyjar = import_jwks_from_file(_context.keyjar, f"{_dirname}/pub_iss.jwks", ISS)
 
         # add some history
         auth_request = AuthorizationRequest(
@@ -475,6 +490,7 @@ class TestAccessTokenRequest(object):
 
 
 class TestProviderInfo(object):
+
     @pytest.fixture(autouse=True)
     def create_service(self):
         self._iss = ISS
@@ -729,7 +745,8 @@ class TestProviderInfo(object):
         # assert _context.claims.use == {}
         resp = self.service.post_parse_response(provider_info_response)
 
-        iss_jwks = ISS_KEY.export_jwks_as_json(issuer_id=ISS)
+        iss_jwks = issuers_keyjar().export_jwks_as_json(issuer_id=ISS)
+
         with responses.RequestsMock() as rsps:
             rsps.add("GET", resp["jwks_uri"], body=iss_jwks, status=200)
 
@@ -739,9 +756,9 @@ class TestProviderInfo(object):
         _context.map_preferred_to_registered()
 
         use_copy = self.service.upstream_get("context").claims.use.copy()
-        # jwks content will change dynamically between runs
-        assert "jwks" in use_copy
-        del use_copy["jwks"]
+        if "jwks" in use_copy:
+            assert True
+            del use_copy["jwks"]
         del use_copy["callback_uris"]
 
         assert use_copy == {
@@ -760,6 +777,7 @@ class TestProviderInfo(object):
             "post_logout_redirect_uris": ["https://rp.example.com/post"],
             "redirect_uris": ["https://example.com/cli/authz_cb"],
             "request_object_signing_alg": "ES256",
+            'request_parameter_supported': True,
             "response_modes": ["query", "fragment", "form_post"],
             "response_types": ["code"],
             "scope": ["openid"],
@@ -807,6 +825,7 @@ class TestProviderInfo(object):
             'post_logout_redirect_uris',
             'redirect_uris',
             'request_object_signing_alg',
+            'request_parameter_supported',
             'response_modes',
             'response_types',
             'scope',
@@ -816,7 +835,7 @@ class TestProviderInfo(object):
             'userinfo_signed_response_alg'}
         resp = self.service.post_parse_response(provider_info_response)
 
-        iss_jwks = ISS_KEY.export_jwks_as_json(issuer_id=ISS)
+        iss_jwks = issuers_keyjar().export_jwks_as_json(issuer_id=ISS)
         with responses.RequestsMock() as rsps:
             rsps.add("GET", resp["jwks_uri"], body=iss_jwks, status=200)
 
@@ -847,6 +866,7 @@ class TestProviderInfo(object):
             "post_logout_redirect_uris": ["https://rp.example.com/post"],
             "redirect_uris": ["https://example.com/cli/authz_cb"],
             "request_object_signing_alg": "ES256",
+            'request_parameter_supported': True,
             "response_modes": ["query", "fragment", "form_post"],
             "response_types": ["code"],
             "scope": ["openid"],
@@ -872,11 +892,12 @@ def create_jws(val):
     idts = IdToken(**val)
 
     return idts.to_jwt(
-        key=ISS_KEY.get_signing_key("ec", issuer_id=ISS), algorithm="ES256", lifetime=lifetime
+        key=issuers_keyjar().get_signing_key("ec", issuer_id=ISS), algorithm="ES256", lifetime=lifetime
     )
 
 
 class TestRegistration(object):
+
     @pytest.fixture(autouse=True)
     def create_request(self):
         self._iss = ISS
@@ -892,9 +913,11 @@ class TestRegistration(object):
             services=DEFAULT_OIDC_SERVICES,
             client_type="oidc",
         )
-        entity.get_context().issuer = "https://example.com"
-        entity.get_context().map_supported_to_preferred()
+        _context = entity.get_context()
+        _context.issuer = "https://example.com"
+        _context.map_supported_to_preferred()
         self.service = entity.get_service("registration")
+        _context.keyjar = import_jwks_from_file(_context.keyjar, f"{_dirname}/pub_iss.jwks", ISS)
 
     def test_construct(self):
         _req = self.service.construct()
@@ -1040,6 +1063,7 @@ def test_config_logout_uri():
 
 
 class TestUserInfo(object):
+
     @pytest.fixture(autouse=True)
     def create_request(self):
         self._iss = ISS
@@ -1060,6 +1084,9 @@ class TestUserInfo(object):
         entity.get_context().issuer = "https://example.com"
         self.service = entity.get_service("userinfo")
 
+        _context = entity.get_context()
+        _context.keyjar = import_jwks_from_file(_context.keyjar, f"{_dirname}/pub_iss.jwks", ISS)
+
         entity.get_context().claims.use = {
             "userinfo_signed_response_alg": "RS256",
             "userinfo_encrypted_response_alg": "RSA-OAEP",
@@ -1074,7 +1101,9 @@ class TestUserInfo(object):
         idtval = {"nonce": "KUEYfRM2VzKDaaKD", "sub": "diana", "iss": ISS, "aud": "client_id"}
         idt = create_jws(idtval)
 
-        ver_idt = IdToken().from_jwt(idt, make_keyjar())
+        _keyjar = make_keyjar()
+        _keyjar = import_jwks_from_file(_keyjar, f"{_dirname}/pub_iss.jwks", ISS)
+        ver_idt = IdToken().from_jwt(idt, _keyjar)
 
         token_response = AccessTokenResponse(
             access_token="access_token", id_token=idt, __verified_id_token=ver_idt
@@ -1104,7 +1133,7 @@ class TestUserInfo(object):
             "phone_number": "+1 (555) 123-4567",
         }
 
-        srv = JWT(ISS_KEY, iss=ISS, sign_alg="ES256")
+        srv = JWT(issuers_keyjar(), iss=ISS, sign_alg="ES256")
         _jwt = srv.pack(payload=claims)
 
         resp = OpenIDSchema(
@@ -1157,7 +1186,7 @@ class TestUserInfo(object):
 
     def test_unpack_signed_response(self):
         resp = OpenIDSchema(sub="diana", given_name="Diana", family_name="krall", iss=ISS)
-        sk = ISS_KEY.get_signing_key("rsa", issuer_id=ISS)
+        sk = issuers_keyjar().get_signing_key("rsa", issuer_id=ISS)
         alg = self.service.upstream_get("context").get_sign_alg("userinfo")
         _resp = self.service.parse_response(
             resp.to_jwt(sk, algorithm=alg), state="abcde", sformat="jwt"
@@ -1168,16 +1197,18 @@ class TestUserInfo(object):
         # Add encryption key
         _kj = build_keyjar([{"type": "RSA", "use": ["enc"]}], issuer_id="")
         # Own key jar gets the private key
-        self.service.upstream_get("attribute", "keyjar").import_jwks(
-            _kj.export_jwks(private=True), issuer_id="client_id"
-        )
-        # opponent gets the public key
-        ISS_KEY.import_jwks(_kj.export_jwks(), issuer_id="client_id")
+        _keyjar = self.service.upstream_get("attribute", "keyjar")
+        _keyjar = import_jwks(_keyjar,
+                              _kj.export_jwks(private=True),
+                              "client_id")
+        # opponent gets the client public keys
+        _keyjar = issuers_keyjar()
+        _keyjar = import_jwks(_keyjar, _kj.export_jwks(), "client_id")
 
         resp = OpenIDSchema(
             sub="diana", given_name="Diana", family_name="krall", iss=ISS, aud="client_id"
         )
-        enckey = ISS_KEY.get_encrypt_key("rsa", issuer_id="client_id")
+        enckey = _keyjar.get_encrypt_key("rsa", issuer_id="client_id")
         algspec = self.service.upstream_get("context").get_enc_alg_enc(self.service.service_name)
 
         enc_resp = resp.to_jwe(enckey, **algspec)
@@ -1186,6 +1217,7 @@ class TestUserInfo(object):
 
 
 class TestCheckSession(object):
+
     @pytest.fixture(autouse=True)
     def create_request(self):
         self._iss = ISS
@@ -1213,6 +1245,7 @@ class TestCheckSession(object):
 
 
 class TestCheckID(object):
+
     @pytest.fixture(autouse=True)
     def create_request(self):
         self._iss = ISS
@@ -1240,6 +1273,7 @@ class TestCheckID(object):
 
 
 class TestEndSession(object):
+
     @pytest.fixture(autouse=True)
     def create_request(self):
         self._iss = ISS
diff --git a/tests/test_client_24_oic_utils.py b/tests/test_client_24_oic_utils.py
index 4e79980..e7d177b 100644
--- a/tests/test_client_24_oic_utils.py
+++ b/tests/test_client_24_oic_utils.py
@@ -1,8 +1,8 @@
 from cryptojwt.jwe.jwe import factory
 from cryptojwt.key_jar import build_keyjar
 
-from idpyoidc.client.oidc.utils import construct_request_uri
-from idpyoidc.client.oidc.utils import request_object_encryption
+from idpyoidc.client.request_object import construct_request_uri
+from idpyoidc.client.request_object import request_object_encryption
 from idpyoidc.client.service_context import ServiceContext
 from idpyoidc.message.oidc import AuthorizationRequest
 
diff --git a/tests/test_client_27_conversation.py b/tests/test_client_27_conversation.py
index fbb2239..a280400 100644
--- a/tests/test_client_27_conversation.py
+++ b/tests/test_client_27_conversation.py
@@ -9,10 +9,11 @@ from cryptojwt.key_jar import KeyJar
 
 from idpyoidc.client.entity import Entity
 from idpyoidc.client.oidc.webfinger import WebFinger
-from idpyoidc.message.oidc import JRD
+from idpyoidc.key_import import import_jwks
 from idpyoidc.message.oidc import AccessTokenResponse
 from idpyoidc.message.oidc import APPLICATION_TYPE_WEB
 from idpyoidc.message.oidc import AuthorizationResponse
+from idpyoidc.message.oidc import JRD
 from idpyoidc.message.oidc import Link
 from idpyoidc.message.oidc import OpenIDSchema
 from idpyoidc.message.oidc import ProviderConfigurationResponse
@@ -28,20 +29,20 @@ JWKS_OP = {
     "keys": [
         {
             "d": "mcAW1xeNsjzyV1M7F7_cUHz0MIR"
-            "-tcnKFJnbbo5UXxMRUPu17qwRHr8ttep1Ie64r2L9QlphcT9BjYd0KQ8ll3flIzLtiJv__MNPQVjk5bsYzb_erQRzSwLJU-aCcNFB8dIyQECzu-p44UVEPQUGzykImsSShvMQhcvrKiqqg7NlijJuEKHaKynV9voPsjwKYSqk6lH8kMloCaVS-dOkK-r7bZtbODUxx9GJWnxhX0JWXcdrPZRb29y9cdthrMcEaCXG23AxnMEfp-enDqarLHYTQrCBJXs_b-9k2d8v9zLm7E-Pf-0YGmaoJtX89lwQkO_SmFF3sXsnI2cFreqU3Q",
+                 "-tcnKFJnbbo5UXxMRUPu17qwRHr8ttep1Ie64r2L9QlphcT9BjYd0KQ8ll3flIzLtiJv__MNPQVjk5bsYzb_erQRzSwLJU-aCcNFB8dIyQECzu-p44UVEPQUGzykImsSShvMQhcvrKiqqg7NlijJuEKHaKynV9voPsjwKYSqk6lH8kMloCaVS-dOkK-r7bZtbODUxx9GJWnxhX0JWXcdrPZRb29y9cdthrMcEaCXG23AxnMEfp-enDqarLHYTQrCBJXs_b-9k2d8v9zLm7E-Pf-0YGmaoJtX89lwQkO_SmFF3sXsnI2cFreqU3Q",
             "e": "AQAB",
             "kid": "c19uYlBJXzVfNjNZeGVnYmxncHZwUzZTZDVwUFdxdVJLU3AxQXdwaFdfbw",
             "kty": "RSA",
             "n": "3ZblhNL2CjRktLM9vyDn8jnA4G1B1HCpPh"
-            "-gv2AK4m9qDBZPYZGOGqzeW3vanvLTBlqnPm0GHg4rOrfMEwwLrfMcgmg1y4GD0vVU8G9HP1"
-            "-oUPtKUqaKOp313tFKzFh9_OHGQ6EmhxG7gegPR9kQXduTDXqBFi81MzRplIQ8DHLM3-n2CyDW1V"
-            "-dhRVh"
-            "-AM0ZcJyzR_DvZ3mhG44DysPdHQOSeWnpdn1d81"
-            "-PriqZfhAF9tn1ihgtjXd5swf1HTSjLd7xv1hitGf2245Xmr"
-            "-V2pQFzeMukLM3JKbTYbElsB7Zm0wZx49hZMtgx35XMoO04bifdbO3yLtTA5ovXN3fQ",
+                 "-gv2AK4m9qDBZPYZGOGqzeW3vanvLTBlqnPm0GHg4rOrfMEwwLrfMcgmg1y4GD0vVU8G9HP1"
+                 "-oUPtKUqaKOp313tFKzFh9_OHGQ6EmhxG7gegPR9kQXduTDXqBFi81MzRplIQ8DHLM3-n2CyDW1V"
+                 "-dhRVh"
+                 "-AM0ZcJyzR_DvZ3mhG44DysPdHQOSeWnpdn1d81"
+                 "-PriqZfhAF9tn1ihgtjXd5swf1HTSjLd7xv1hitGf2245Xmr"
+                 "-V2pQFzeMukLM3JKbTYbElsB7Zm0wZx49hZMtgx35XMoO04bifdbO3yLtTA5ovXN3fQ",
             "p": "88aNu59aBn0elksaVznzoVKkdbT5B4euhOIEqJoFvFbEocw9mC4k"
-            "-yozIAQSV5FEakoSPOl8lrymCoM3Q1fVHfaM9Rbb9RCRlsV1JOeVVZOE05HUdz8zOIqLBDEGM_oQqDwF_kp"
-            "-4nDTZ1-dtnGdTo4Cf7QRuApzE_dwVabUCTc",
+                 "-yozIAQSV5FEakoSPOl8lrymCoM3Q1fVHfaM9Rbb9RCRlsV1JOeVVZOE05HUdz8zOIqLBDEGM_oQqDwF_kp"
+                 "-4nDTZ1-dtnGdTo4Cf7QRuApzE_dwVabUCTc",
             "q": "6LOHuM7H_0kDrMTwUEX7Aubzr792GoJ6EgTKIQY25SAFTZpYwuC3NnqlAdy8foIa3d7eGU2yICRbBG0S_ITcooDFrOa7nZ6enMUclMTxW8FwwvBXeIHo9cIsrKYtOThGplz43Cvl73MK5M58ZRmuhaNYa6Mk4PL4UokARfEiDus",
             "use": "sig",
         },
@@ -58,7 +59,7 @@ JWKS_OP = {
 }
 
 OP_KEYJAR = KeyJar()
-OP_KEYJAR.import_jwks(JWKS_OP, "")
+OP_KEYJAR = import_jwks(OP_KEYJAR, JWKS_OP, "")
 OP_PUBLIC_JWKS = OP_KEYJAR.export_jwks()
 OP_BASEURL = "https://example.org/op"
 
@@ -70,13 +71,13 @@ RP_JWKS = {
             "kid": "Mk0yN2w0N3BZLWtyOEpQWGFmNDZvQi1hbDl2azR3ai1WNElGdGZQSFd6MA",
             "e": "AQAB",
             "n": "yPrOADZtGoa9jxFCmDsJ1nAYmzgznUxCtUlb_ty33"
-            "-AFNEqzW_pSLr5g6RQAPGsvVQqbsb9AB18QNgz"
-            "-eG7cnvKIIR7JXWCuGv_Q9MwoRD0-zaYGRbRvFoTZokZMB6euBfMo6kijJ"
-            "-gdKuSaxIE84X_Fcf1ESAKJ0EX6Cxdm8hKkBelGIDPMW5z7EHQ8OuLCQtTJnDvbjEOk9sKzkKqVj53XFs5vjd4WUhxS6xIDcWE-lTafUpm0BsobklLePidHxyAMGOunL_Pt3RCLZGlWeWOO9fZhLtydiDWiZlcNR0FQEX_mfV1kCOHHBFN1VKOY2pyJpjp9djdtHxPZ9fP35w",
+                 "-AFNEqzW_pSLr5g6RQAPGsvVQqbsb9AB18QNgz"
+                 "-eG7cnvKIIR7JXWCuGv_Q9MwoRD0-zaYGRbRvFoTZokZMB6euBfMo6kijJ"
+                 "-gdKuSaxIE84X_Fcf1ESAKJ0EX6Cxdm8hKkBelGIDPMW5z7EHQ8OuLCQtTJnDvbjEOk9sKzkKqVj53XFs5vjd4WUhxS6xIDcWE-lTafUpm0BsobklLePidHxyAMGOunL_Pt3RCLZGlWeWOO9fZhLtydiDWiZlcNR0FQEX_mfV1kCOHHBFN1VKOY2pyJpjp9djdtHxPZ9fP35w",
             "d": "aRBTqGDLYFaXuba4LYSPe_5Vnq8erFg1dzfGU9Fmfi5KCjAS2z5cv_reBnpiNTODJt3Izn7AJhpYCyl3zdWGl8EJ0OabNalY2txoi9A-LI4nyrHEDaRpfkgszVwaWtYZbxrShMc8I5x_wvCGx7sX7Hoy6YgQreRFzw8Fy86MDncpmcUwQTnXVUMLgioeYz5gW6rwXkqj_NVyuHPiheykJG026cXFNBWplCk4ET1bvf_6ZB9QmLwO16Pu2O-dtu1HHDOqI7y6-YgKIC6mcLrQrF9-FO7NkilcOB7zODNiYzhDBQ2YJAbcdn_3M_lkhaFwR-n4WB7vCM0vNqz7lEg6QQ",
             "p": "_STNoJFkX9_uw8whytVmTrHP5K7vcZBIH9nuCTvj137lC48ZpR1UARx4qShxHLfK7DrufHd7TYnJkEMNUHFmdKvkaVQMY0_BsBSvCrUl10gzxsI08hg53L17E1Pe73iZp3f5nA4eB-1YB-km1Cc-Xs10OPWedJHf9brlCPDLAb8",
             "q": "yz9T0rPEc0ZPjSi45gsYiQL2KJ3UsPHmLrgOHq0D4UvsB6UFtUtOWh7A1UpQdmBuHjIJz"
-            "-Iq7VH4kzlI6VxoXhwE69oxBXr4I7fBudZRvlLuIJS9M2wvsTVouj0DBYSR6ZlAQHCCou89P2P6zQCEaqu7bWXNcpyTixbbvOU1w9k",
+                 "-Iq7VH4kzlI6VxoXhwE69oxBXr4I7fBudZRvlLuIJS9M2wvsTVouj0DBYSR6ZlAQHCCou89P2P6zQCEaqu7bWXNcpyTixbbvOU1w9k",
         },
         {
             "kty": "EC",
@@ -91,12 +92,12 @@ RP_JWKS = {
 }
 
 RP_KEYJAR = KeyJar()
-RP_KEYJAR.import_jwks(RP_JWKS, "")
-RP_KEYJAR.import_jwks(OP_PUBLIC_JWKS, OP_BASEURL)
+RP_KEYJAR = import_jwks(RP_KEYJAR, RP_JWKS, "")
+RP_KEYJAR = import_jwks(RP_KEYJAR, OP_PUBLIC_JWKS, OP_BASEURL)
 RP_BASEURL = "https://example.com/rp"
 
 SERVICE_PUBLIC_JWKS = RP_KEYJAR.export_jwks("")
-OP_KEYJAR.import_jwks(SERVICE_PUBLIC_JWKS, RP_BASEURL)
+OP_KEYJAR = import_jwks(OP_KEYJAR, SERVICE_PUBLIC_JWKS, RP_BASEURL)
 
 # ---------------------------------------------------
 
@@ -155,11 +156,11 @@ def test_conversation():
     info = webfinger_service.get_request_parameters(request_args={"resource": "foobar@example.org"})
 
     assert (
-        info["url"] == "https://example.org/.well-known/webfinger?rel=http"
-        "%3A%2F"
-        "%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer"
-        "&resource"
-        "=acct%3Afoobar%40example.org"
+            info["url"] == "https://example.org/.well-known/webfinger?rel=http"
+                           "%3A%2F"
+                           "%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer"
+                           "&resource"
+                           "=acct%3Afoobar%40example.org"
     )
 
     webfinger_response = json.dumps(
diff --git a/tests/test_client_28_stand_alone.py b/tests/test_client_28_stand_alone.py
index d3c3a2a..0ea921a 100644
--- a/tests/test_client_28_stand_alone.py
+++ b/tests/test_client_28_stand_alone.py
@@ -11,6 +11,7 @@ from idpyoidc.client.defaults import OIDCONF_PATTERN
 from idpyoidc.client.exception import Unsupported
 from idpyoidc.client.oauth2.stand_alone_client import StandAloneClient
 from idpyoidc.exception import VerificationError
+from idpyoidc.key_import import import_jwks
 from idpyoidc.message.oidc import AccessTokenResponse
 from idpyoidc.message.oidc import AuthorizationResponse
 from idpyoidc.message.oidc import IdToken
@@ -416,7 +417,7 @@ class TestPostAuthn(object):
         idval = {"nonce": _nonce, "sub": subject, "iss": _iss, "aud": _aud}
 
         _keyjar = _context.upstream_get("attribute", "keyjar")
-        _keyjar.import_jwks(ISSUER_KEYS.export_jwks(issuer_id=ISSUER), ISSUER)
+        _keyjar = import_jwks(_keyjar, ISSUER_KEYS.export_jwks(issuer_id=ISSUER), ISSUER)
 
         idts = IdToken(**idval)
         return idts.to_jwt(
diff --git a/tests/test_client_30_rp_handler_oidc.py b/tests/test_client_30_rp_handler_oidc.py
index 3a3d75f..f02aa8d 100644
--- a/tests/test_client_30_rp_handler_oidc.py
+++ b/tests/test_client_30_rp_handler_oidc.py
@@ -4,12 +4,13 @@ from urllib.parse import parse_qs
 from urllib.parse import urlparse
 from urllib.parse import urlsplit
 
-from cryptojwt.key_jar import init_key_jar
 import pytest
 import responses
+from cryptojwt.key_jar import init_key_jar
 
 from idpyoidc.client.entity import Entity
 from idpyoidc.client.rp_handler import RPHandler
+from idpyoidc.key_import import import_jwks
 from idpyoidc.message.oidc import AccessTokenResponse
 from idpyoidc.message.oidc import APPLICATION_TYPE_WEB
 from idpyoidc.message.oidc import AuthorizationResponse
@@ -217,6 +218,7 @@ def iss_id(iss):
 
 
 class TestRPHandler(object):
+
     @pytest.fixture(autouse=True)
     def rphandler_setup(self):
         self.rph = RPHandler(
@@ -270,6 +272,7 @@ class TestRPHandler(object):
                               'id_token_signing_alg_values_supported',
                               'redirect_uris',
                               'request_object_signing_alg_values_supported',
+                              'request_parameter_supported',
                               'response_modes_supported',
                               'response_types_supported',
                               'scopes_supported',
@@ -279,13 +282,13 @@ class TestRPHandler(object):
 
         _github_id = iss_id("github")
         _keyjar = _context.upstream_get("attribute", "keyjar")
-        _keyjar.import_jwks(GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
+        _keyjar = import_jwks(_keyjar, GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
 
         # The key jar should only contain a symmetric key that is the clients
         # secret. 2 because one is marked for encryption and the other signing
         # usage.
 
-        assert set(_keyjar.owners()) == {"", "eeeeeeeee", _github_id}
+        assert set(_keyjar.owners()) == {"", _context.claims.prefer["client_id"], _github_id}
         keys = _keyjar.get_issuer_keys("")
         assert len(keys) == 3
 
@@ -329,9 +332,9 @@ class TestRPHandler(object):
         assert _context.issuer == _github_id
 
         _keyjar = _context.upstream_get("attribute", "keyjar")
-        _keyjar.import_jwks(GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
+        _keyjar = import_jwks(_keyjar, GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
 
-        assert set(_keyjar.owners()) == {"", "eeeeeeeee", _github_id}
+        assert set(_keyjar.owners()) == {"", _context.claims.prefer["client_id"], _github_id}
         keys = _keyjar.get_issuer_keys("")
         assert len(keys) == 3
 
@@ -347,7 +350,7 @@ class TestRPHandler(object):
         cb = _context.get_preference("callback_uris")
 
         assert set(cb.keys()) == {"request_uris", "redirect_uris"}
-        assert set(cb["redirect_uris"].keys()) == {"query", "fragment"}
+        assert set(cb["redirect_uris"].keys()) == {"query", "fragment", "form_post"}
         _hash = _context.iss_hash
 
         assert cb["redirect_uris"]["query"] == [f"https://example.com/rp/authz_cb/{_hash}"]
@@ -449,7 +452,7 @@ class TestRPHandler(object):
         _github_id = iss_id("github")
         _context = client.get_context()
         _keyjar = _context.upstream_get("attribute", "keyjar")
-        _keyjar.import_jwks(GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
+        _keyjar = import_jwks(_keyjar, GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
 
         _nonce = _session["nonce"]
         _iss = _session["iss"]
@@ -524,7 +527,7 @@ class TestRPHandler(object):
 
         _github_id = iss_id("github")
         _keyjar = _context.upstream_get("attribute", "keyjar")
-        _keyjar.import_jwks(GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
+        _keyjar = import_jwks(_keyjar, GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
 
         idts = IdToken(**idval)
         _signed_jwt = idts.to_jwt(
@@ -571,7 +574,7 @@ class TestRPHandler(object):
 
         _github_id = iss_id("github")
         _keyjar = _context.upstream_get("attribute", "keyjar")
-        _keyjar.import_jwks(GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
+        _keyjar = import_jwks(_keyjar, GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
 
         idts = IdToken(**idval)
         _signed_jwt = idts.to_jwt(
@@ -618,7 +621,7 @@ class TestRPHandler(object):
 
         _github_id = iss_id("github")
         _keyjar = _context.upstream_get("attribute", "keyjar")
-        _keyjar.import_jwks(GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
+        _keyjar = import_jwks(_keyjar, GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
 
         idts = IdToken(**idval)
         _signed_jwt = idts.to_jwt(
@@ -697,6 +700,7 @@ def test_get_provider_specific_service():
 
 
 class TestRPHandlerTier2(object):
+
     @pytest.fixture(autouse=True)
     def rphandler_setup(self):
         self.rph = RPHandler(BASE_URL, CLIENT_CONFIG, keyjar=CLI_KEY)
@@ -712,7 +716,7 @@ class TestRPHandlerTier2(object):
 
         _github_id = iss_id("github")
         _keyjar = _context.upstream_get("attribute", "keyjar")
-        _keyjar.import_jwks(GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
+        _keyjar = import_jwks(_keyjar, GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
 
         idts = IdToken(**idval)
         _signed_jwt = idts.to_jwt(
@@ -818,6 +822,7 @@ class TestRPHandlerTier2(object):
 
 
 class MockResponse:
+
     def __init__(self, status_code, text, headers=None):
         self.status_code = status_code
         self.text = text
@@ -825,6 +830,7 @@ class MockResponse:
 
 
 class MockOP(object):
+
     def __init__(self, issuer, keyjar=None):
         self.keyjar = keyjar
         self.issuer = issuer
@@ -913,6 +919,7 @@ def test_rphandler_request():
 
 
 class TestRPHandlerWithMockOP(object):
+
     @pytest.fixture(autouse=True)
     def rphandler_setup(self):
         self.issuer = "https://github.com/login/oauth/authorize"
@@ -956,7 +963,7 @@ class TestRPHandlerWithMockOP(object):
         )
         _github_id = iss_id("github")
         _keyjar = client.get_attribute("keyjar")
-        _keyjar.import_jwks(GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
+        _keyjar = import_jwks(_keyjar, GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
         with responses.RequestsMock() as rsps:
             rsps.add(
                 "POST",
diff --git a/tests/test_client_30_rph_defaults.py b/tests/test_client_30_rph_defaults.py
index 177b772..7648572 100644
--- a/tests/test_client_30_rph_defaults.py
+++ b/tests/test_client_30_rph_defaults.py
@@ -45,11 +45,11 @@ class TestRPHandler(object):
             'id_token_encryption_alg_values_supported',
             'id_token_encryption_enc_values_supported',
             'id_token_signing_alg_values_supported',
-            'jwks_uri',
             'redirect_uris',
             'request_object_encryption_alg_values_supported',
             'request_object_encryption_enc_values_supported',
             'request_object_signing_alg_values_supported',
+            'request_parameter_supported',
             'response_modes_supported',
             'response_types_supported',
             'scopes_supported',
@@ -61,7 +61,7 @@ class TestRPHandler(object):
             'userinfo_signing_alg_values_supported'}
 
         _keyjar = client.get_attribute("keyjar")
-        assert list(_keyjar.owners()) == ["", BASE_URL]
+        assert list(_keyjar.owners()) == [""]
         keys = _keyjar.get_issuer_keys("")
         assert len(keys) == 2
 
@@ -116,9 +116,9 @@ class TestRPHandler(object):
             "encrypt_request_object_supported",
             "grant_types",
             "id_token_signed_response_alg",
-            "jwks_uri",
             "redirect_uris",
             "request_object_signing_alg",
+            'request_parameter_supported',
             "response_modes",
             "response_types",
             "scope",
@@ -180,4 +180,5 @@ class TestRPHandler(object):
             rsps.add("POST", request_uri, body=_jws, status=200)
             self.rph.do_client_registration(client, ISS_ID)
 
-        assert "jwks_uri" in _context.get("registration_response")
+        assert "client_id" in _context.get("registration_response")
+        assert _context.client_id
diff --git a/tests/test_client_41_rp_handler_persistent.py b/tests/test_client_41_rp_handler_persistent.py
index 8edce03..d70dd1d 100644
--- a/tests/test_client_41_rp_handler_persistent.py
+++ b/tests/test_client_41_rp_handler_persistent.py
@@ -6,6 +6,7 @@ import responses
 from cryptojwt.key_jar import init_key_jar
 
 from idpyoidc.client.rp_handler import RPHandler
+from idpyoidc.key_import import import_jwks
 from idpyoidc.message.oidc import AccessTokenResponse
 from idpyoidc.message.oidc import APPLICATION_TYPE_WEB
 from idpyoidc.message.oidc import AuthorizationResponse
@@ -249,7 +250,7 @@ class TestRPHandler(object):
         assert _context.get("issuer") == _github_id
 
         _keyjar = _context.upstream_get("attribute", "keyjar")
-        _keyjar.import_jwks(GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
+        _keyjar = import_jwks(_keyjar, GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
 
         assert set(_keyjar.owners()) == {"", "eeeeeeeee", _github_id}
         keys = _keyjar.get_issuer_keys("")
@@ -291,7 +292,7 @@ class TestRPHandler(object):
         assert query["client_id"] == ["eeeeeeeee"]
         assert query["redirect_uri"] == ["https://example.com/rp/authz_cb/github"]
         assert query["response_type"] == ["code"]
-        assert query["scope"] == ["user public_repo openid"]
+        assert query["scope"] == ["openid"]
 
     def test_get_session_information(self):
         rph_1 = RPHandler(
@@ -376,7 +377,7 @@ class TestRPHandler(object):
         _github_id = iss_id("github")
         _context = client.get_context()
         _keyjar = _context.upstream_get("attribute", "keyjar")
-        _keyjar.import_jwks(GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
+        _keyjar = import_jwks(_keyjar, GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
 
         _nonce = _session["nonce"]
         _iss = _session["iss"]
@@ -457,7 +458,7 @@ class TestRPHandler(object):
 
         _github_id = iss_id("github")
         _keyjar = _context.upstream_get("attribute", "keyjar")
-        _keyjar.import_jwks(GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
+        _keyjar = import_jwks(_keyjar, GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
 
         idts = IdToken(**idval)
         _signed_jwt = idts.to_jwt(
@@ -508,7 +509,7 @@ class TestRPHandler(object):
 
         _github_id = iss_id("github")
         _keyjar = _context.upstream_get("attribute", "keyjar")
-        _keyjar.import_jwks(GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
+        _keyjar = import_jwks(_keyjar, GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
 
         idts = IdToken(**idval)
         _signed_jwt = idts.to_jwt(
@@ -559,7 +560,7 @@ class TestRPHandler(object):
 
         _github_id = iss_id("github")
         _keyjar = _context.upstream_get("attribute", "keyjar")
-        _keyjar.import_jwks(GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
+        _keyjar = import_jwks(_keyjar, GITHUB_KEY.export_jwks(issuer_id=_github_id), _github_id)
 
         idts = IdToken(**idval)
         _signed_jwt = idts.to_jwt(
diff --git a/tests/test_client_55_token_exchange.py b/tests/test_client_55_token_exchange.py
index 108e867..6fbc4ca 100644
--- a/tests/test_client_55_token_exchange.py
+++ b/tests/test_client_55_token_exchange.py
@@ -4,6 +4,7 @@ import pytest
 from cryptojwt.key_jar import init_key_jar
 
 from idpyoidc.client.entity import Entity
+from idpyoidc.key_import import import_jwks_from_file
 from idpyoidc.message import Message
 from idpyoidc.message.oauth2 import AccessTokenResponse
 from idpyoidc.message.oauth2 import AuthorizationResponse
@@ -27,7 +28,7 @@ ISS_KEY = init_key_jar(
     read_only=False,
 )
 
-ISS_KEY.import_jwks_as_json(open("{}/pub_client.jwks".format(_dirname)).read(), "client_id")
+ISS_KEY = import_jwks_from_file(ISS_KEY, f"{_dirname}/pub_client.jwks", "client_id")
 
 
 def create_jws(val):
@@ -63,6 +64,9 @@ class TestUserInfo(object):
             },
         )
         entity.get_context().issuer = "https://example.com"
+        _context = entity.get_context()
+        _context.keyjar = import_jwks_from_file(_context.keyjar, f"{_dirname}/pub_iss.jwks", ISS)
+
         self.service = entity.get_service("token_exchange")
         _cstate = self.service.upstream_get("context").cstate
         # Add history
@@ -72,7 +76,7 @@ class TestUserInfo(object):
         idtval = {"nonce": "KUEYfRM2VzKDaaKD", "sub": "diana", "iss": ISS, "aud": "client_id"}
         idt = create_jws(idtval)
 
-        ver_idt = IdToken().from_jwt(idt, make_keyjar())
+        ver_idt = IdToken().from_jwt(idt, _context.keyjar)
 
         token_response = AccessTokenResponse(
             access_token="access_token", id_token=idt, __verified_id_token=ver_idt
diff --git a/tests/test_server_05_token_handler.py b/tests/test_server_05_token_handler.py
index 21d247d..721cae7 100644
--- a/tests/test_server_05_token_handler.py
+++ b/tests/test_server_05_token_handler.py
@@ -1,11 +1,6 @@
-import base64
-import hashlib
-import hmac
 import os
-import secrets
 
 import pytest
-from cryptojwt.jwe.fernet import FernetEncrypter
 
 from idpyoidc.encrypter import default_crypt_config
 from idpyoidc.server import Server
@@ -39,6 +34,7 @@ def test_is_expired():
 
 
 class TestDefaultToken(object):
+
     @pytest.fixture(autouse=True)
     def setup_token_handler(self):
         password = "The longer the better. Is this close to enough ?"
@@ -78,6 +74,7 @@ class TestDefaultToken(object):
 
 
 class TestTokenHandler(object):
+
     @pytest.fixture(autouse=True)
     def setup_token_handler(self):
         grant_expires_in = 600
@@ -282,3 +279,87 @@ def test_file(jwks):
     server = Server(OPConfiguration(conf=conf, base_path=BASEDIR), cwd=BASEDIR)
     token_handler = server.context.session_manager.token_handler
     assert token_handler
+
+def test_token_handler_from_config_2():
+    conf = {
+        "issuer": "https://example.com/op",
+        "keys": {"uri_path": "static/jwks.json", "key_defs": KEYDEFS},
+        "endpoint": {
+            "endpoint": {"path": "endpoint", "class": Endpoint, "kwargs": {}},
+        },
+        "token_handler_args": {
+            "jwks_def": {
+                "private_path": "private/token_jwks.json",
+                "read_only": False,
+                "key_defs": [{"type": "oct", "bytes": "24", "use": ["enc"], "kid": "code"}],
+            },
+            "code": {
+                "kwargs": {
+                    "lifetime": 600,
+                    "crypt_conf": {
+                        "kwargs": {
+                            "key": "0987654321abcdefghijklmnop...---",
+                            "salt": "abcdefghijklmnop",
+                            "iterations": 1
+                        }
+                    }
+                }
+            },
+            "token": {
+                "class": "idpyoidc.server.token.jwt_token.JWTToken",
+                "kwargs": {
+                    "lifetime": 3600,
+                    "add_claims_by_scope": True,
+                    "aud": ["https://example.org/appl"],
+                },
+            },
+            "refresh": {
+                "class": "idpyoidc.server.token.jwt_token.JWTToken",
+                "kwargs": {
+                    "lifetime": 3600,
+                    "aud": ["https://example.org/appl"],
+                },
+            },
+            "id_token": {
+                "class": "idpyoidc.server.token.id_token.IDToken",
+                "kwargs": {
+                    "base_claims": {
+                        "email": {"essential": True},
+                        "email_verified": {"essential": True},
+                    }
+                },
+            },
+        },
+        "session_params": SESSION_PARAMS,
+    }
+
+    server = Server(OPConfiguration(conf=conf, base_path=BASEDIR), cwd=BASEDIR)
+    token_handler = server.context.session_manager.token_handler
+    assert token_handler
+    assert len(token_handler.handler) == 4
+    assert set(token_handler.handler.keys()) == {
+        "authorization_code",
+        "access_token",
+        "refresh_token",
+        "id_token",
+    }
+    assert isinstance(token_handler.handler["authorization_code"], DefaultToken)
+    assert isinstance(token_handler.handler["access_token"], JWTToken)
+    assert isinstance(token_handler.handler["refresh_token"], JWTToken)
+    assert isinstance(token_handler.handler["id_token"], IDToken)
+
+    assert token_handler.handler["authorization_code"].lifetime == 600
+
+    assert token_handler.handler["access_token"].alg == "ES256"
+    assert token_handler.handler["access_token"].kwargs == {"add_claims_by_scope": True}
+    assert token_handler.handler["access_token"].lifetime == 3600
+    assert token_handler.handler["access_token"].def_aud == ["https://example.org/appl"]
+
+    assert token_handler.handler["refresh_token"].alg == "ES256"
+    assert token_handler.handler["refresh_token"].kwargs == {}
+    assert token_handler.handler["refresh_token"].lifetime == 3600
+    assert token_handler.handler["refresh_token"].def_aud == ["https://example.org/appl"]
+
+    assert token_handler.handler["id_token"].lifetime == 300
+    assert "base_claims" in token_handler.handler["id_token"].kwargs
+
diff --git a/tests/test_server_08_id_token.py b/tests/test_server_08_id_token.py
index ecc72c6..5a9cb33 100644
--- a/tests/test_server_08_id_token.py
+++ b/tests/test_server_08_id_token.py
@@ -6,6 +6,7 @@ from cryptojwt import JWT
 from cryptojwt import KeyJar
 from cryptojwt.jws.jws import factory
 
+from idpyoidc.key_import import import_jwks
 from idpyoidc.message.oidc import AuthorizationRequest
 from idpyoidc.server import Server
 from idpyoidc.server.authn_event import create_authn_event
@@ -160,6 +161,7 @@ USER_ID = "diana"
 
 
 class TestEndpoint(object):
+
     @pytest.fixture(autouse=True)
     def create_session_manager(self):
         self.server = Server(conf)
@@ -467,7 +469,7 @@ class TestEndpoint(object):
 
         client_keyjar = KeyJar()
         _jwks = self.server.keyjar.export_jwks()
-        client_keyjar.import_jwks(_jwks, self.context.issuer)
+        client_keyjar = import_jwks(client_keyjar, _jwks, self.context.issuer)
 
         _jwt = JWT(key_jar=client_keyjar, iss="client_1")
         res = _jwt.unpack(id_token.value)
@@ -501,7 +503,7 @@ class TestEndpoint(object):
 
         client_keyjar = KeyJar()
         _jwks = self.server.keyjar.export_jwks()
-        client_keyjar.import_jwks(_jwks, self.context.issuer)
+        client_keyjar = import_jwks(client_keyjar, _jwks, self.context.issuer)
         _jwt = JWT(key_jar=client_keyjar, iss="client_1")
         res = _jwt.unpack(id_token.value)
         assert "nickname" in res
@@ -514,7 +516,7 @@ class TestEndpoint(object):
 
         client_keyjar = KeyJar()
         _jwks = self.server.keyjar.export_jwks()
-        client_keyjar.import_jwks(_jwks, self.context.issuer)
+        client_keyjar = import_jwks(client_keyjar, _jwks, self.context.issuer)
         _jwt = JWT(key_jar=client_keyjar, iss="client_1")
         res = _jwt.unpack(id_token.value)
 
@@ -531,7 +533,7 @@ class TestEndpoint(object):
 
         client_keyjar = KeyJar()
         _jwks = self.server.keyjar.export_jwks()
-        client_keyjar.import_jwks(_jwks, self.context.issuer)
+        client_keyjar = import_jwks(client_keyjar, _jwks, self.context.issuer)
         _jwt = JWT(key_jar=client_keyjar, iss="client_1")
         res = _jwt.unpack(id_token.value)
 
@@ -546,7 +548,7 @@ class TestEndpoint(object):
 
         client_keyjar = KeyJar()
         _jwks = self.server.keyjar.export_jwks()
-        client_keyjar.import_jwks(_jwks, self.context.issuer)
+        client_keyjar = import_jwks(client_keyjar, _jwks, self.context.issuer)
         _jwt = JWT(key_jar=client_keyjar, iss="client_1")
         res = _jwt.unpack(id_token.value)
         assert "foobar" not in res
@@ -567,7 +569,7 @@ class TestEndpoint(object):
 
         client_keyjar = KeyJar()
         _jwks = self.server.keyjar.export_jwks()
-        client_keyjar.import_jwks(_jwks, self.context.issuer)
+        client_keyjar = import_jwks(client_keyjar, _jwks, self.context.issuer)
         _jwt = JWT(key_jar=client_keyjar, iss="client_1")
         res = _jwt.unpack(id_token.value)
         assert "address" in res
@@ -586,7 +588,7 @@ class TestEndpoint(object):
 
         client_keyjar = KeyJar()
         _jwks = self.server.keyjar.export_jwks()
-        client_keyjar.import_jwks(_jwks, self.context.issuer)
+        client_keyjar = import_jwks(client_keyjar, _jwks, self.context.issuer)
         _jwt = JWT(key_jar=client_keyjar, iss="client_1")
         res = _jwt.unpack(id_token.value)
 
@@ -605,7 +607,7 @@ class TestEndpoint(object):
 
         client_keyjar = KeyJar()
         _jwks = self.server.keyjar.export_jwks()
-        client_keyjar.import_jwks(_jwks, self.context.issuer)
+        client_keyjar = import_jwks(client_keyjar, _jwks, self.context.issuer)
         _jwt = JWT(key_jar=client_keyjar, iss="client_1")
         res = _jwt.unpack(id_token.value)
         assert "address" in res
@@ -627,7 +629,7 @@ class TestEndpoint(object):
 
         client_keyjar = KeyJar()
         _jwks = self.server.keyjar.export_jwks()
-        client_keyjar.import_jwks(_jwks, self.context.issuer)
+        client_keyjar = import_jwks(client_keyjar, _jwks, self.context.issuer)
         _jwt = JWT(key_jar=client_keyjar, iss="client_1")
         res = _jwt.unpack(id_token.value)
         assert "address" in res
@@ -645,7 +647,7 @@ class TestEndpoint(object):
 
         client_keyjar = KeyJar()
         _jwks = self.server.keyjar.export_jwks()
-        client_keyjar.import_jwks(_jwks, self.context.issuer)
+        client_keyjar = import_jwks(client_keyjar, _jwks, self.context.issuer)
         _jwt = JWT(key_jar=client_keyjar, iss="client_1")
         res = _jwt.unpack(id_token.value)
         # User information, from scopes -> claims
@@ -668,7 +670,7 @@ class TestEndpoint(object):
 
         client_keyjar = KeyJar()
         _jwks = self.server.keyjar.export_jwks()
-        client_keyjar.import_jwks(_jwks, self.context.issuer)
+        client_keyjar = import_jwks(client_keyjar, _jwks, self.context.issuer)
         _jwt = JWT(key_jar=client_keyjar, iss="client_1")
         res = _jwt.unpack(id_token.value)
         # Email didn't match
diff --git a/tests/test_server_09_authn_context.py b/tests/test_server_09_authn_context.py
index 4b9a72e..31b6ac7 100644
--- a/tests/test_server_09_authn_context.py
+++ b/tests/test_server_09_authn_context.py
@@ -4,6 +4,7 @@ import os
 import pytest
 from cryptojwt.jwk.hmac import SYMKey
 
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.server import Server
 from idpyoidc.server.authn_event import AuthnEvent
 from idpyoidc.server.user_authn.authn_context import INTERNETPROTOCOLPASSWORD
@@ -164,7 +165,7 @@ class TestAuthnBrokerEC:
                 "code id_token token",
             ],
         }
-        server.keyjar.import_jwks(server.keyjar.export_jwks(True, ""), conf["issuer"])
+        server.keyjar = store_under_other_id(server.keyjar, "", conf["issuer"], True)
 
         self.server = server
 
diff --git a/tests/test_server_12_session_life.py b/tests/test_server_12_session_life.py
index 50de8c8..64e7c13 100644
--- a/tests/test_server_12_session_life.py
+++ b/tests/test_server_12_session_life.py
@@ -3,6 +3,7 @@ import os
 import pytest
 from cryptojwt.key_jar import init_key_jar
 
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message.oidc import AccessTokenRequest
 from idpyoidc.message.oidc import AuthorizationRequest
 from idpyoidc.message.oidc import RefreshAccessTokenRequest
@@ -202,7 +203,7 @@ KEYDEFS = [
 ISSUER = "https://example.com/"
 
 KEYJAR = init_key_jar(key_defs=KEYDEFS, issuer_id=ISSUER)
-KEYJAR.import_jwks(KEYJAR.export_jwks(True, ISSUER), "")
+KEYJAR = store_under_other_id(KEYJAR, ISSUER, "", True)
 RESPONSE_TYPES_SUPPORTED = [
     ["code"],
     ["token"],
diff --git a/tests/test_server_16_endpoint.py b/tests/test_server_16_endpoint.py
index 5a3b59d..7c02399 100755
--- a/tests/test_server_16_endpoint.py
+++ b/tests/test_server_16_endpoint.py
@@ -209,7 +209,7 @@ class TestEndpoint(object):
     def test_do_response_placement_body(self):
         self.endpoint.response_placement = "body"
         info = self.endpoint.do_response(EXAMPLE_MSG)
-        assert ("Content-type", "application/json; charset=utf-8") in info["http_headers"]
+        assert ("Content-type", "application/json") in info["http_headers"]
         assert (
             info["response"] == '{"name": "Doe, Jane", "given_name": "Jane", "family_name": '
             '"Doe"}'
@@ -217,6 +217,7 @@ class TestEndpoint(object):
 
     def test_do_response_placement_url(self):
         self.endpoint.response_placement = "url"
+        self.endpoint.response_format = "urlencoded"
         info = self.endpoint.do_response(EXAMPLE_MSG, return_uri="https://example.org/cb")
         assert ("Content-type", "application/x-www-form-urlencoded") in info["http_headers"]
         assert (
diff --git a/tests/test_server_16_endpoint_context.py b/tests/test_server_16_endpoint_context.py
index bf4b828..a462ce8 100644
--- a/tests/test_server_16_endpoint_context.py
+++ b/tests/test_server_16_endpoint_context.py
@@ -1,17 +1,14 @@
 import copy
 import os
 
-import pytest
 from cryptojwt.key_jar import build_keyjar
+import pytest
 
-from idpyoidc import metadata
+from idpyoidc import alg_info
 from idpyoidc.server import OPConfiguration
 from idpyoidc.server import Server
 from idpyoidc.server.endpoint import Endpoint
-from idpyoidc.server.exception import OidcEndpointError
 from idpyoidc.server.user_authn.authn_context import INTERNETPROTOCOLPASSWORD
-from idpyoidc.server.util import allow_refresh_token
-
 from . import CRYPT_CONFIG
 from . import SESSION_PARAMS
 from . import full_path
@@ -28,9 +25,9 @@ class Endpoint_1(Endpoint):
     name = "userinfo"
     _supports = {
         "claim_types_supported": ["normal", "aggregated", "distributed"],
-        "userinfo_signing_alg_values_supported": metadata.get_signing_algs(),
-        "userinfo_encryption_alg_values_supported": metadata.get_encryption_algs(),
-        "userinfo_encryption_enc_values_supported": metadata.get_encryption_encs(),
+        "userinfo_signing_alg_values_supported": alg_info.get_signing_algs(),
+        "userinfo_encryption_alg_values_supported": alg_info.get_encryption_algs(),
+        "userinfo_encryption_enc_values_supported": alg_info.get_encryption_encs(),
         "client_authn_method": ["bearer_header", "bearer_body"],
         "encrypt_userinfo_supported": False,
     }
diff --git a/tests/test_server_17_client_authn.py b/tests/test_server_17_client_authn.py
index b329644..aadaa72 100644
--- a/tests/test_server_17_client_authn.py
+++ b/tests/test_server_17_client_authn.py
@@ -6,14 +6,16 @@ from unittest.mock import MagicMock
 import pytest
 from cryptojwt.jws.exception import NoSuitableSigningKeys
 from cryptojwt.jwt import JWT
-from cryptojwt.key_jar import KeyJar
 from cryptojwt.key_jar import build_keyjar
+from cryptojwt.key_jar import KeyJar
 from cryptojwt.utils import as_bytes
 from cryptojwt.utils import as_unicode
 
 from idpyoidc.defaults import JWT_BEARER
-from idpyoidc.server import Server
+from idpyoidc.key_import import import_jwks
 from idpyoidc.server import do_endpoints
+from idpyoidc.server import Server
+from idpyoidc.server.client_authn import basic_authn
 from idpyoidc.server.client_authn import BearerBody
 from idpyoidc.server.client_authn import BearerHeader
 from idpyoidc.server.client_authn import ClientSecretBasic
@@ -21,7 +23,6 @@ from idpyoidc.server.client_authn import ClientSecretJWT
 from idpyoidc.server.client_authn import ClientSecretPost
 from idpyoidc.server.client_authn import JWSAuthnMethod
 from idpyoidc.server.client_authn import PrivateKeyJWT
-from idpyoidc.server.client_authn import basic_authn
 from idpyoidc.server.client_authn import verify_client
 from idpyoidc.server.endpoint import Endpoint
 from idpyoidc.server.exception import ClientAuthenticationError
@@ -49,7 +50,7 @@ class Endpoint_3(Endpoint):
     name = "endpoint_3"
 
     def __init__(
-        self, upstream_get: Callable, add_claims_by_scope: Optional[bool] = True, **kwargs
+            self, upstream_get: Callable, add_claims_by_scope: Optional[bool] = True, **kwargs
     ):
         Endpoint.__init__(
             self,
@@ -127,6 +128,7 @@ def get_client_id_from_token(context, token, request=None):
 
 
 class TestClientSecretBasic:
+
     @pytest.fixture(autouse=True)
     def setup(self):
         server = Server(conf=CONF, keyjar=KEYJAR)
@@ -162,6 +164,7 @@ class TestClientSecretBasic:
 
 
 class TestClientSecretPost:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         server = Server(conf=CONF, keyjar=KEYJAR)
@@ -185,6 +188,7 @@ class TestClientSecretPost:
 
 
 class TestClientSecretJWT:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         server = Server(conf=CONF, keyjar=KEYJAR)
@@ -194,7 +198,7 @@ class TestClientSecretJWT:
 
     def test_client_secret_jwt(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
         # The only own key the client has at this point
         client_keyjar.add_symmetric("", client_secret, ["sig"])
 
@@ -212,6 +216,7 @@ class TestClientSecretJWT:
 
 
 class TestPrivateKeyJWT:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         server = Server(conf=CONF, keyjar=KEYJAR)
@@ -225,10 +230,10 @@ class TestPrivateKeyJWT:
         # Own dynamic keys
         client_keyjar = build_keyjar(KEYDEFS)
         # The servers keys
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
 
         _jwks = client_keyjar.export_jwks()
-        self.server.keyjar.import_jwks(_jwks, client_id)
+        self.server.keyjar = import_jwks(self.server.keyjar, _jwks, client_id)
 
         _jwt = JWT(client_keyjar, iss=client_id, sign_alg="RS256")
         _jwt.with_jti = True
@@ -246,10 +251,10 @@ class TestPrivateKeyJWT:
         # Own dynamic keys
         client_keyjar = build_keyjar(KEYDEFS)
         # The servers keys
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
 
         _jwks = client_keyjar.export_jwks()
-        self.server.keyjar.import_jwks(_jwks, client_id)
+        self.server.keyjar = import_jwks(self.server.keyjar, _jwks, client_id)
 
         _jwt = JWT(client_keyjar, iss=client_id, sign_alg="RS256")
         _jwt.with_jti = True
@@ -273,10 +278,10 @@ class TestPrivateKeyJWT:
         # Own dynamic keys
         client_keyjar = build_keyjar(KEYDEFS)
         # The servers keys
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
 
         _jwks = client_keyjar.export_jwks()
-        self.server.keyjar.import_jwks(_jwks, client_id)
+        self.server.keyjar = import_jwks(self.server.keyjar, _jwks, client_id)
 
         _jwt = JWT(client_keyjar, iss=client_id, sign_alg="RS256")
         _jwt.with_jti = True
@@ -295,6 +300,7 @@ class TestPrivateKeyJWT:
 
 
 class TestBearerHeader:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         server = Server(conf=CONF, keyjar=KEYJAR)
@@ -318,6 +324,7 @@ class TestBearerHeader:
 
 
 class TestBearerBody:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         server = Server(conf=CONF, keyjar=KEYJAR)
@@ -341,6 +348,7 @@ class TestBearerBody:
 
 
 class TestJWSAuthnMethod:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         server = Server(conf=CONF, keyjar=KEYJAR)
@@ -352,7 +360,7 @@ class TestJWSAuthnMethod:
 
     def test_jws_authn_method_wrong_key(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
         # Fake symmetric key
         client_keyjar.add_symmetric("", "client_secret:client_secret", ["sig"])
 
@@ -366,7 +374,7 @@ class TestJWSAuthnMethod:
 
     def test_jws_authn_method_aud_iss(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar,KEYJAR.export_jwks(private=True), CONF["issuer"])
         # The only own key the client has a this point
         client_keyjar.add_symmetric("", client_secret, ["sig"])
 
@@ -381,7 +389,7 @@ class TestJWSAuthnMethod:
 
     def test_jws_authn_method_aud_token_endpoint(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
         # The only own key the client has a this point
         client_keyjar.add_symmetric("", client_secret, ["sig"])
 
@@ -401,7 +409,7 @@ class TestJWSAuthnMethod:
 
     def test_jws_authn_method_aud_not_me(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
         # The only own key the client has at this point
         client_keyjar.add_symmetric("", client_secret, ["sig"])
 
@@ -419,7 +427,7 @@ class TestJWSAuthnMethod:
 
     def test_jws_authn_method_aud_userinfo_endpoint(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
         # The only own key the client has a this point
         client_keyjar.add_symmetric("", client_secret, ["sig"])
 
@@ -465,6 +473,7 @@ def test_basic_auth_wrong_token():
 
 
 class TestVerify:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         self.server = Server(conf=CONF, keyjar=KEYJAR)
@@ -520,7 +529,7 @@ class TestVerify:
 
     def test_verify_client_jws_authn_method(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
         # The only own key the client has a this point
         client_keyjar.add_symmetric("", client_secret, ["sig"])
 
@@ -582,6 +591,7 @@ class TestVerify:
 
 
 class TestVerify2:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         self.server = Server(conf=CONF, keyjar=KEYJAR)
@@ -591,7 +601,7 @@ class TestVerify2:
 
     def test_verify_client_jws_authn_method(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
         # The only own key the client has a this point
         client_keyjar.add_symmetric("", client_secret, ["sig"])
 
diff --git a/tests/test_server_20a_server.py b/tests/test_server_20a_server.py
index 8413b01..32968ed 100755
--- a/tests/test_server_20a_server.py
+++ b/tests/test_server_20a_server.py
@@ -122,7 +122,7 @@ def test_capabilities_default():
         "id_token",
         "code id_token",
     }
-    assert server.context.provider_info["request_uri_parameter_supported"] is True
+    assert server.context.provider_info["request_uri_parameter_supported"] is False
     assert server.context.get_preference("jwks_uri") == "https://127.0.0.1:443/static/jwks.json"
 
 
@@ -137,10 +137,7 @@ def test_capabilities_subset2():
     _cnf = deepcopy(CONF)
     _cnf["response_types_supported"] = ["code", "id_token"]
     server = Server(_cnf)
-    assert set(server.context.provider_info["response_types_supported"]) == {
-        "code",
-        "id_token",
-    }
+    assert set(server.context.provider_info["response_types_supported"]) == {"code", "id_token"}
 
 
 def test_capabilities_bool():
diff --git a/tests/test_server_20d_client_authn.py b/tests/test_server_20d_client_authn.py
index d45e342..152cb52 100755
--- a/tests/test_server_20d_client_authn.py
+++ b/tests/test_server_20d_client_authn.py
@@ -4,13 +4,17 @@ from unittest.mock import MagicMock
 import pytest
 from cryptojwt.jws.exception import NoSuitableSigningKeys
 from cryptojwt.jwt import JWT
-from cryptojwt.key_jar import KeyJar
 from cryptojwt.key_jar import build_keyjar
+from cryptojwt.key_jar import KeyJar
 from cryptojwt.utils import as_bytes
 from cryptojwt.utils import as_unicode
 
 from idpyoidc.defaults import JWT_BEARER
+from idpyoidc.key_import import add_keys
+from idpyoidc.key_import import add_symmetric
+from idpyoidc.key_import import import_jwks
 from idpyoidc.server import Server
+from idpyoidc.server.client_authn import basic_authn
 from idpyoidc.server.client_authn import BearerBody
 from idpyoidc.server.client_authn import BearerHeader
 from idpyoidc.server.client_authn import ClientSecretBasic
@@ -18,7 +22,6 @@ from idpyoidc.server.client_authn import ClientSecretJWT
 from idpyoidc.server.client_authn import ClientSecretPost
 from idpyoidc.server.client_authn import JWSAuthnMethod
 from idpyoidc.server.client_authn import PrivateKeyJWT
-from idpyoidc.server.client_authn import basic_authn
 from idpyoidc.server.client_authn import verify_client
 from idpyoidc.server.exception import ClientAuthenticationError
 from idpyoidc.server.exception import InvalidToken
@@ -88,6 +91,7 @@ def get_client_id_from_token(context, token, request=None):
 
 
 class TestClientSecretBasic:
+
     @pytest.fixture(autouse=True)
     def setup(self):
         server = Server(conf=CONF, keyjar=KEYJAR)
@@ -122,6 +126,7 @@ class TestClientSecretBasic:
 
 
 class TestClientSecretPost:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         server = Server(conf=CONF, keyjar=KEYJAR)
@@ -145,6 +150,7 @@ class TestClientSecretPost:
 
 
 class TestClientSecretJWT:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         server = Server(conf=CONF, keyjar=KEYJAR)
@@ -154,9 +160,10 @@ class TestClientSecretJWT:
 
     def test_client_secret_jwt(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
-        # The only own key the client has a this point
-        client_keyjar.add_symmetric("", client_secret, ["sig"])
+        # The only own key the client has at this point
+        client_keyjar = add_symmetric(client_keyjar, client_secret, "")
+        # The issuers keys
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
 
         _jwt = JWT(client_keyjar, iss=client_id, sign_alg="HS256")
         _jwt.with_jti = True
@@ -164,6 +171,7 @@ class TestClientSecretJWT:
 
         request = {"client_assertion": _assertion, "client_assertion_type": JWT_BEARER}
 
+        self.context.keyjar = add_keys(self.context.keyjar, client_keyjar.get(key_use="sig", key_type="oct"), client_id)
         assert self.method.is_usable(request=request)
         authn_info = self.method.verify(request=request)
 
@@ -172,6 +180,7 @@ class TestClientSecretJWT:
 
 
 class TestPrivateKeyJWT:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         server = Server(conf=CONF, keyjar=KEYJAR)
@@ -184,10 +193,10 @@ class TestPrivateKeyJWT:
         # Own dynamic keys
         client_keyjar = build_keyjar(KEYDEFS)
         # The servers keys
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
 
         _jwks = client_keyjar.export_jwks()
-        self.server.keyjar.import_jwks(_jwks, client_id)
+        self.server.keyjar = import_jwks(self.server.keyjar, _jwks, client_id)
 
         _jwt = JWT(client_keyjar, iss=client_id, sign_alg="RS256")
         _jwt.with_jti = True
@@ -205,10 +214,10 @@ class TestPrivateKeyJWT:
         # Own dynamic keys
         client_keyjar = build_keyjar(KEYDEFS)
         # The servers keys
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
 
         _jwks = client_keyjar.export_jwks()
-        self.server.keyjar.import_jwks(_jwks, client_id)
+        self.server.keyjar = import_jwks(self.server.keyjar, _jwks, client_id)
 
         _jwt = JWT(client_keyjar, iss=client_id, sign_alg="RS256")
         _jwt.with_jti = True
@@ -232,10 +241,10 @@ class TestPrivateKeyJWT:
         # Own dynamic keys
         client_keyjar = build_keyjar(KEYDEFS)
         # The servers keys
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
 
         _jwks = client_keyjar.export_jwks()
-        self.server.keyjar.import_jwks(_jwks, client_id)
+        self.server.keyjar = import_jwks(self.server.keyjar, _jwks, client_id)
 
         _jwt = JWT(client_keyjar, iss=client_id, sign_alg="RS256")
         _jwt.with_jti = True
@@ -254,6 +263,7 @@ class TestPrivateKeyJWT:
 
 
 class TestBearerHeader:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         server = Server(conf=CONF, keyjar=KEYJAR)
@@ -276,6 +286,7 @@ class TestBearerHeader:
 
 
 class TestBearerBody:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         server = Server(conf=CONF, keyjar=KEYJAR)
@@ -298,6 +309,7 @@ class TestBearerBody:
 
 
 class TestJWSAuthnMethod:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         server = Server(conf=CONF, keyjar=KEYJAR)
@@ -308,7 +320,7 @@ class TestJWSAuthnMethod:
 
     def test_jws_authn_method_wrong_key(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
         # Fake symmetric key
         client_keyjar.add_symmetric("", "client_secret:client_secret", ["sig"])
 
@@ -322,7 +334,7 @@ class TestJWSAuthnMethod:
 
     def test_jws_authn_method_aud_iss(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
         # The only own key the client has a this point
         client_keyjar.add_symmetric("", client_secret, ["sig"])
 
@@ -337,7 +349,7 @@ class TestJWSAuthnMethod:
 
     def test_jws_authn_method_aud_token_endpoint(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
         # The only own key the client has a this point
         client_keyjar.add_symmetric("", client_secret, ["sig"])
 
@@ -357,7 +369,7 @@ class TestJWSAuthnMethod:
 
     def test_jws_authn_method_aud_not_me(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
         # The only own key the client has at this point
         client_keyjar.add_symmetric("", client_secret, ["sig"])
 
@@ -375,7 +387,7 @@ class TestJWSAuthnMethod:
 
     def test_jws_authn_method_aud_userinfo_endpoint(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
         # The only own key the client has a this point
         client_keyjar.add_symmetric("", client_secret, ["sig"])
 
@@ -421,6 +433,7 @@ def test_basic_auth_wrong_token():
 
 
 class TestVerify:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         self.server = Server(conf=CONF, keyjar=KEYJAR)
@@ -475,7 +488,7 @@ class TestVerify:
 
     def test_verify_client_jws_authn_method(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
         # The only own key the client has a this point
         client_keyjar.add_symmetric("", client_secret, ["sig"])
 
@@ -546,6 +559,7 @@ class TestVerify:
 
 
 class TestVerify2:
+
     @pytest.fixture(autouse=True)
     def create_method(self):
         self.server = Server(conf=CONF, keyjar=KEYJAR)
@@ -554,7 +568,7 @@ class TestVerify2:
 
     def test_verify_client_jws_authn_method(self):
         client_keyjar = KeyJar()
-        client_keyjar.import_jwks(KEYJAR.export_jwks(private=True), CONF["issuer"])
+        client_keyjar = import_jwks(client_keyjar, KEYJAR.export_jwks(private=True), CONF["issuer"])
         # The only own key the client has a this point
         client_keyjar.add_symmetric("", client_secret, ["sig"])
 
diff --git a/tests/test_server_20e_jwt_token.py b/tests/test_server_20e_jwt_token.py
index d824bd1..ef295bf 100644
--- a/tests/test_server_20e_jwt_token.py
+++ b/tests/test_server_20e_jwt_token.py
@@ -4,6 +4,7 @@ import pytest
 from cryptojwt.jwt import JWT
 from cryptojwt.key_jar import init_key_jar
 
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message.oidc import AccessTokenRequest
 from idpyoidc.message.oidc import AuthorizationRequest
 from idpyoidc.server import Server
@@ -31,7 +32,7 @@ KEYDEFS = [
 ISSUER = "https://example.com/"
 
 KEYJAR = init_key_jar(key_defs=KEYDEFS, issuer_id=ISSUER)
-KEYJAR.import_jwks(KEYJAR.export_jwks(True, ISSUER), "")
+KEYJAR = store_under_other_id(KEYJAR, ISSUER, "", True)
 
 RESPONSE_TYPES_SUPPORTED = [
     ["code"],
@@ -98,6 +99,7 @@ def full_path(local_file):
 
 
 class TestEndpoint(object):
+
     @pytest.fixture(autouse=True)
     def create_endpoint(self):
         conf = {
@@ -297,6 +299,7 @@ class TestEndpoint(object):
 
 
 class TestEndpointWebID(object):
+
     @pytest.fixture(autouse=True)
     def create_endpoint(self):
         _scope2claims = SCOPE2CLAIMS.copy()
diff --git a/tests/test_server_22_oidc_provider_config_endpoint.py b/tests/test_server_22_oidc_provider_config_endpoint.py
index 7000d72..fe1f076 100755
--- a/tests/test_server_22_oidc_provider_config_endpoint.py
+++ b/tests/test_server_22_oidc_provider_config_endpoint.py
@@ -19,12 +19,8 @@ KEYDEFS = [
 
 RESPONSE_TYPES_SUPPORTED = [
     ["code"],
-    ["token"],
     ["id_token"],
-    ["code", "token"],
     ["code", "id_token"],
-    ["id_token", "token"],
-    ["code", "token", "id_token"],
     ["none"],
 ]
 
@@ -92,16 +88,16 @@ class TestProviderConfigEndpoint(object):
         assert _msg["token_endpoint"] == "https://example.com/token"
         assert _msg["jwks_uri"] == "https://example.com/static/jwks.json"
         assert "claims_supported" not in _msg  # No default for this
-        assert ("Content-type", "application/json; charset=utf-8") in msg["http_headers"]
+        assert ("Content-type", "application/json") in msg["http_headers"]
 
-    def test_scopes_supported(self, conf):
-        scopes_supported = ["openid", "random", "profile"]
-        conf["scopes_supported"] = scopes_supported
-
-        server = Server(OPConfiguration(conf=conf, base_path=BASEDIR), cwd=BASEDIR)
-        endpoint = server.get_endpoint("provider_config")
-        args = endpoint.process_request()
-        msg = endpoint.do_response(args["response_args"])
-        assert isinstance(msg, dict)
-        _msg = json.loads(msg["response"])
-        assert set(_msg["scopes_supported"]) == set(scopes_supported)
+    # def test_scopes_supported(self, conf):
+    #     scopes_supported = ["openid", "random", "profile"]
+    #     conf["scopes_supported"] = scopes_supported
+    #
+    #     server = Server(OPConfiguration(conf=conf, base_path=BASEDIR), cwd=BASEDIR)
+    #     endpoint = server.get_endpoint("provider_config")
+    #     args = endpoint.process_request()
+    #     msg = endpoint.do_response(args["response_args"])
+    #     assert isinstance(msg, dict)
+    #     _msg = json.loads(msg["response"])
+    #     assert set(_msg["scopes_supported"]) == set(scopes_supported)
diff --git a/tests/test_server_24_oauth2_authorization_endpoint.py b/tests/test_server_24_oauth2_authorization_endpoint.py
index 925424c..d0a010c 100755
--- a/tests/test_server_24_oauth2_authorization_endpoint.py
+++ b/tests/test_server_24_oauth2_authorization_endpoint.py
@@ -5,16 +5,17 @@ from http.cookies import SimpleCookie
 from urllib.parse import parse_qs
 from urllib.parse import urlparse
 
-from cryptojwt.jws.jws import factory
 import pytest
 import yaml
 from cryptojwt import KeyJar
+from cryptojwt.jws.jws import factory
 from cryptojwt.jwt import utc_time_sans_frac
 from cryptojwt.utils import as_bytes
 from cryptojwt.utils import b64e
 
 from idpyoidc.exception import ParameterError
 from idpyoidc.exception import URIError
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message.oauth2 import AuthorizationErrorResponse
 from idpyoidc.message.oauth2 import AuthorizationRequest
 from idpyoidc.message.oauth2 import AuthorizationResponse
@@ -31,8 +32,8 @@ from idpyoidc.server.exception import RedirectURIError
 from idpyoidc.server.exception import ToOld
 from idpyoidc.server.exception import UnAuthorizedClientScope
 from idpyoidc.server.exception import UnknownClient
-from idpyoidc.server.oauth2.authorization import FORM_POST
 from idpyoidc.server.oauth2.authorization import Authorization
+from idpyoidc.server.oauth2.authorization import FORM_POST
 from idpyoidc.server.oauth2.authorization import get_uri
 from idpyoidc.server.oauth2.authorization import inputs
 from idpyoidc.server.oauth2.authorization import join_query
@@ -84,6 +85,7 @@ USERINFO_db = json.loads(open(full_path("users.json")).read())
 
 
 class SimpleCookieDealer(object):
+
     def __init__(self, name=""):
         self.name = name
 
@@ -159,6 +161,7 @@ clients:
 
 
 class TestEndpoint(object):
+
     @pytest.fixture(autouse=True)
     def create_endpoint(self):
         conf = {
@@ -265,7 +268,7 @@ class TestEndpoint(object):
         context = server.context
         _clients = yaml.safe_load(io.StringIO(client_yaml))
         context.cdb = _clients["clients"]
-        server.keyjar.import_jwks(server.keyjar.export_jwks(True, ""), conf["issuer"])
+        server.keyjar = store_under_other_id(server.keyjar, "", conf["issuer"], True)
         self.context = context
         self.endpoint = server.get_endpoint("authorization")
         self.session_manager = context.session_manager
@@ -370,7 +373,8 @@ class TestEndpoint(object):
     )
     def test_verify_uri_localhost_ipv4_native_client(self, client_redirect_uri, redirect_uri):
         _context = self.endpoint.upstream_get("context")
-        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, {})],"application_type": APPLICATION_TYPE_NATIVE}
+        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, {})],
+                                     "application_type": APPLICATION_TYPE_NATIVE}
         request = {"redirect_uri": redirect_uri}
 
         verify_uri(_context, request, "redirect_uri", "client_id")
@@ -381,15 +385,20 @@ class TestEndpoint(object):
             ("http://[::1]:9999/auth_cb", "http://[::1]:3456/auth_cb"),
             ("http://[::1]/auth_cb", "http://[::1]/auth_cb"),
             ("http://[::1]/auth_cb", "http://[::1]:3456/auth_cb"),
-            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]:9999/auth_cb", "http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb"),
-            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]:9999/auth_cb", "http://[0000:0000:0000:0000:0000:0000:0000:0001]:3456/auth_cb"),
-            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb", "http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb"),
-            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb", "http://[0000:0000:0000:0000:0000:0000:0000:0001]:3456/auth_cb"),
+            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]:9999/auth_cb",
+             "http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb"),
+            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]:9999/auth_cb",
+             "http://[0000:0000:0000:0000:0000:0000:0000:0001]:3456/auth_cb"),
+            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb",
+             "http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb"),
+            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb",
+             "http://[0000:0000:0000:0000:0000:0000:0000:0001]:3456/auth_cb"),
         ]
     )
     def test_verify_uri_localhost_ipv6_native_client(self, client_redirect_uri, redirect_uri):
         _context = self.endpoint.upstream_get("context")
-        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, {})],"application_type": APPLICATION_TYPE_NATIVE}
+        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, {})],
+                                     "application_type": APPLICATION_TYPE_NATIVE}
         request = {"redirect_uri": redirect_uri}
 
         verify_uri(_context, request, "redirect_uri", "client_id")
@@ -403,10 +412,11 @@ class TestEndpoint(object):
     )
     def test_verify_uri_literal_localhost_native_client(self, client_redirect_uri, redirect_uri):
         _context = self.endpoint.upstream_get("context")
-        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, {})],"application_type": APPLICATION_TYPE_NATIVE}
+        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, {})],
+                                     "application_type": APPLICATION_TYPE_NATIVE}
         request = {"redirect_uri": redirect_uri}
         with pytest.raises(RedirectURIError):
-          verify_uri(_context, request, "redirect_uri", "client_id")
+            verify_uri(_context, request, "redirect_uri", "client_id")
 
     @pytest.mark.parametrize(
         "client_redirect_uri, redirect_uri", [
@@ -417,71 +427,85 @@ class TestEndpoint(object):
     )
     def test_verify_uri_localhost_ipv4_web_client(self, client_redirect_uri, redirect_uri):
         _context = self.endpoint.upstream_get("context")
-        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, {})],"application_type": APPLICATION_TYPE_WEB}
+        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, {})],
+                                     "application_type": APPLICATION_TYPE_WEB}
         request = {"redirect_uri": redirect_uri}
         with pytest.raises(RedirectURIError):
-          verify_uri(_context, request, "redirect_uri", "client_id")
+            verify_uri(_context, request, "redirect_uri", "client_id")
 
     @pytest.mark.parametrize(
         "client_redirect_uri, redirect_uri", [
             ("http://[::1]:9999/auth_cb", "http://[::1]/auth_cb"),
             ("http://[::1]:9999/auth_cb", "http://[::1]:3456/auth_cb"),
             ("http://[::1]/auth_cb", "http://[::1]:3456/auth_cb"),
-            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]:9999/auth_cb", "http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb"),
-            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]:9999/auth_cb", "http://[0000:0000:0000:0000:0000:0000:0000:0001]:3456/auth_cb"),
-            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb", "http://[0000:0000:0000:0000:0000:0000:0000:0001]:3456/auth_cb"),
+            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]:9999/auth_cb",
+             "http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb"),
+            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]:9999/auth_cb",
+             "http://[0000:0000:0000:0000:0000:0000:0000:0001]:3456/auth_cb"),
+            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb",
+             "http://[0000:0000:0000:0000:0000:0000:0000:0001]:3456/auth_cb"),
         ]
     )
     def test_verify_uri_localhost_ipv6_web_client(self, client_redirect_uri, redirect_uri):
         _context = self.endpoint.upstream_get("context")
-        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, {})],"application_type": APPLICATION_TYPE_WEB}
+        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, {})],
+                                     "application_type": APPLICATION_TYPE_WEB}
         request = {"redirect_uri": redirect_uri}
         with pytest.raises(RedirectURIError):
-          verify_uri(_context, request, "redirect_uri", "client_id")
+            verify_uri(_context, request, "redirect_uri", "client_id")
 
     @pytest.mark.parametrize(
         "client_redirect_uri, client_redirect_uri_qp, redirect_uri", [
-            ("http://127.0.0.1:9999/auth_cb", {"foo":["bar"]}, "http://127.0.0.1:9999/auth_cb?foo=bar"),
-            ("http://127.0.0.1:9999/auth_cb", {"foo":["bar"]}, "http://127.0.0.1:3456/auth_cb?foo=bar"),
-            ("http://127.0.0.1/auth_cb", {"foo":["bar"]}, "http://127.0.0.1/auth_cb?foo=bar"),
-            ("http://127.0.0.1/auth_cb", {"foo":["bar"]}, "http://127.0.0.1:3456/auth_cb?foo=bar"),
+            ("http://127.0.0.1:9999/auth_cb", {"foo": ["bar"]}, "http://127.0.0.1:9999/auth_cb?foo=bar"),
+            ("http://127.0.0.1:9999/auth_cb", {"foo": ["bar"]}, "http://127.0.0.1:3456/auth_cb?foo=bar"),
+            ("http://127.0.0.1/auth_cb", {"foo": ["bar"]}, "http://127.0.0.1/auth_cb?foo=bar"),
+            ("http://127.0.0.1/auth_cb", {"foo": ["bar"]}, "http://127.0.0.1:3456/auth_cb?foo=bar"),
         ]
     )
-    def test_verify_uri_qp_localhost_ipv4_native_client(self, client_redirect_uri, client_redirect_uri_qp, redirect_uri):
+    def test_verify_uri_qp_localhost_ipv4_native_client(self, client_redirect_uri, client_redirect_uri_qp,
+                                                        redirect_uri):
         _context = self.endpoint.upstream_get("context")
-        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, client_redirect_uri_qp)],"application_type": APPLICATION_TYPE_NATIVE}
+        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, client_redirect_uri_qp)],
+                                     "application_type": APPLICATION_TYPE_NATIVE}
         request = {"redirect_uri": redirect_uri}
 
         verify_uri(_context, request, "redirect_uri", "client_id")
 
     @pytest.mark.parametrize(
         "client_redirect_uri, client_redirect_uri_qp, redirect_uri", [
-            ("http://[::1]:9999/auth_cb", {"foo":["bar"]}, "http://[::1]:9999/auth_cb?foo=bar"),
-            ("http://[::1]:9999/auth_cb", {"foo":["bar"]}, "http://[::1]:3456/auth_cb?foo=bar"),
-            ("http://[::1]/auth_cb", {"foo":["bar"]}, "http://[::1]/auth_cb?foo=bar"),
-            ("http://[::1]/auth_cb", {"foo":["bar"]}, "http://[::1]:3456/auth_cb?foo=bar"),
-            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]:9999/auth_cb", {"foo":["bar"]}, "http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb?foo=bar"),
-            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]:9999/auth_cb", {"foo":["bar"]}, "http://[0000:0000:0000:0000:0000:0000:0000:0001]:3456/auth_cb?foo=bar"),
-            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb", {"foo":["bar"]}, "http://[0000:0000:0000:0000:0000:0000:0000:0001]:3456/auth_cb?foo=bar"),
-            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb", {"foo":["bar"]}, "http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb?foo=bar"),
+            ("http://[::1]:9999/auth_cb", {"foo": ["bar"]}, "http://[::1]:9999/auth_cb?foo=bar"),
+            ("http://[::1]:9999/auth_cb", {"foo": ["bar"]}, "http://[::1]:3456/auth_cb?foo=bar"),
+            ("http://[::1]/auth_cb", {"foo": ["bar"]}, "http://[::1]/auth_cb?foo=bar"),
+            ("http://[::1]/auth_cb", {"foo": ["bar"]}, "http://[::1]:3456/auth_cb?foo=bar"),
+            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]:9999/auth_cb", {"foo": ["bar"]},
+             "http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb?foo=bar"),
+            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]:9999/auth_cb", {"foo": ["bar"]},
+             "http://[0000:0000:0000:0000:0000:0000:0000:0001]:3456/auth_cb?foo=bar"),
+            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb", {"foo": ["bar"]},
+             "http://[0000:0000:0000:0000:0000:0000:0000:0001]:3456/auth_cb?foo=bar"),
+            ("http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb", {"foo": ["bar"]},
+             "http://[0000:0000:0000:0000:0000:0000:0000:0001]/auth_cb?foo=bar"),
         ]
     )
-    def test_verify_uri_qp_localhost_ipv6_native_client(self, client_redirect_uri, client_redirect_uri_qp, redirect_uri):
+    def test_verify_uri_qp_localhost_ipv6_native_client(self, client_redirect_uri, client_redirect_uri_qp,
+                                                        redirect_uri):
         _context = self.endpoint.upstream_get("context")
-        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, client_redirect_uri_qp)], "application_type": APPLICATION_TYPE_NATIVE}
+        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, client_redirect_uri_qp)],
+                                     "application_type": APPLICATION_TYPE_NATIVE}
         request = {"redirect_uri": redirect_uri}
 
         verify_uri(_context, request, "redirect_uri", "client_id")
 
     @pytest.mark.parametrize(
         "client_redirect_uri, client_redirect_uri_qp, redirect_uri", [
-            ("https://rp.example.com:9999/auth_cb", {"foo":["bar"]}, "http://rp.example.com/auth_cb?foo=bar"),
-            ("https://rp.example.com/auth_cb", {"foo":["bar"]}, "http://rp.example.com:9999/auth_cb?foo=bar"),
+            ("https://rp.example.com:9999/auth_cb", {"foo": ["bar"]}, "http://rp.example.com/auth_cb?foo=bar"),
+            ("https://rp.example.com/auth_cb", {"foo": ["bar"]}, "http://rp.example.com:9999/auth_cb?foo=bar"),
         ]
     )
-    def test_verify_uri_qp_match_native_client(self,  client_redirect_uri, client_redirect_uri_qp, redirect_uri):
+    def test_verify_uri_qp_match_native_client(self, client_redirect_uri, client_redirect_uri_qp, redirect_uri):
         _context = self.endpoint.upstream_get("context")
-        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, client_redirect_uri_qp)], "application_type": APPLICATION_TYPE_NATIVE}
+        _context.cdb["client_id"] = {"redirect_uris": [(client_redirect_uri, client_redirect_uri_qp)],
+                                     "application_type": APPLICATION_TYPE_NATIVE}
 
         request = {"redirect_uri": redirect_uri}
 
@@ -922,7 +946,6 @@ class TestEndpoint(object):
         _payload = _jws.jwt.payload()
         assert 'aud' in _payload
 
-
     # def test_audience(self):
     #     request = AuthorizationRequest(
     #         client_id="client_id",
@@ -948,6 +971,7 @@ class TestEndpoint(object):
     #     res = self.endpoint.setup_auth(request, redirect_uri, cinfo, None)
     #     assert set(res.keys()) == {"session_id", "identity", "user"}
 
+
 def test_inputs():
     elems = inputs(dict(foo="bar", home="stead"))
     test_elems = (
diff --git a/tests/test_server_24_oauth2_authorization_endpoint_jar.py b/tests/test_server_24_oauth2_authorization_endpoint_jar.py
index f788c7e..e57360e 100755
--- a/tests/test_server_24_oauth2_authorization_endpoint_jar.py
+++ b/tests/test_server_24_oauth2_authorization_endpoint_jar.py
@@ -10,6 +10,7 @@ from cryptojwt import JWT
 from cryptojwt import KeyJar
 from cryptojwt.jwt import utc_time_sans_frac
 
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message.oauth2 import AuthorizationRequest
 from idpyoidc.message.oauth2 import JWTSecuredAuthorizationRequest
 from idpyoidc.server import Server
@@ -28,15 +29,6 @@ KEYDEFS = [
 
 RESPONSE_TYPES_SUPPORTED = [["code"], ["token"], ["code", "token"], ["none"]]
 
-CAPABILITIES = {
-    "grant_types_supported": [
-        "authorization_code",
-        "implicit",
-        "urn:ietf:params:oauth:grant-type:jwt-bearer",
-        "refresh_token",
-    ]
-}
-
 AUTH_REQ = AuthorizationRequest(
     client_id="client_1",
     redirect_uri="https://example.com/cb",
@@ -58,6 +50,7 @@ USERINFO_db = json.loads(open(full_path("users.json")).read())
 
 
 class SimpleCookieDealer(object):
+
     def __init__(self, name=""):
         self.name = name
 
@@ -133,24 +126,29 @@ clients:
 
 
 class TestEndpoint(object):
+
     @pytest.fixture(autouse=True)
     def create_endpoint(self):
         conf = {
             "issuer": "https://example.com/",
             "password": "mycket hemligt zebra",
-            "verify_ssl": False,
-            "grant_types_supported": [
-                "authorization_code",
-                "implicit",
-                "urn:ietf:params:oauth:grant-type:jwt-bearer",
-                "refresh_token",
-            ],
+            "httpc_params": {
+                "verify": False
+            },
+            "preference": {
+                "grant_types_supported": [
+                    "authorization_code",
+                    "urn:ietf:params:oauth:grant-type:jwt-bearer",
+                    "refresh_token",
+                ],
+                "response_types_supported": [" ".join(x) for x in RESPONSE_TYPES_SUPPORTED],
+                "response_modes_supported": ["query", "fragment", "form_post"],
+                "claims_parameter_supported": True,
+                "request_parameter_supported": True,
+                "request_uri_parameter_supported": True,
+                "request_object_signing_alg_values_supported": ["HS256"]
+            },
             "keys": {"uri_path": "static/jwks.json", "key_defs": KEYDEFS},
-            "response_types_supported": [" ".join(x) for x in RESPONSE_TYPES_SUPPORTED],
-            "response_modes_supported": ["query", "fragment", "form_post"],
-            "claims_parameter_supported": True,
-            "request_parameter_supported": True,
-            "request_uri_parameter_supported": True,
             "request_cls": JWTSecuredAuthorizationRequest,
             "endpoint": {
                 "authorization": {
@@ -190,7 +188,7 @@ class TestEndpoint(object):
         context = server.context
         _clients = yaml.safe_load(io.StringIO(client_yaml))
         context.cdb = _clients["clients"]
-        server.keyjar.import_jwks(server.keyjar.export_jwks(True, ""), conf["issuer"])
+        server.keyjar = store_under_other_id(server.keyjar, "", conf["issuer"], True)
         self.endpoint = server.get_endpoint("authorization")
         self.session_manager = context.session_manager
         self.user_id = "diana"
diff --git a/tests/test_server_24_oauth2_resource_indicators.py b/tests/test_server_24_oauth2_resource_indicators.py
index 14e6a03..bb91a46 100644
--- a/tests/test_server_24_oauth2_resource_indicators.py
+++ b/tests/test_server_24_oauth2_resource_indicators.py
@@ -2,23 +2,14 @@ import io
 import json
 import os
 from http.cookies import SimpleCookie
-from urllib.parse import parse_qs
-from urllib.parse import urlparse
 
 import pytest
 import yaml
 from cryptojwt import KeyJar
-from cryptojwt.jwt import JWT
 from cryptojwt.jwt import utc_time_sans_frac
-from cryptojwt.key_jar import init_key_jar
-from cryptojwt.utils import as_bytes
-from cryptojwt.utils import b64e
 
-from idpyoidc.exception import ParameterError
-from idpyoidc.exception import URIError
-from idpyoidc.message.oauth2 import AuthorizationErrorResponse
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message.oauth2 import AuthorizationRequest
-from idpyoidc.message.oauth2 import AuthorizationResponse
 from idpyoidc.message.oauth2 import TokenErrorResponse
 from idpyoidc.message.oidc import AccessTokenRequest
 from idpyoidc.server import Server
@@ -26,21 +17,10 @@ from idpyoidc.server.authn_event import create_authn_event
 from idpyoidc.server.authz import AuthzHandling
 from idpyoidc.server.configure import ASConfiguration
 from idpyoidc.server.cookie_handler import CookieHandler
-from idpyoidc.server.exception import InvalidRequest
-from idpyoidc.server.exception import NoSuchAuthentication
-from idpyoidc.server.exception import RedirectURIError
-from idpyoidc.server.exception import ToOld
-from idpyoidc.server.exception import UnAuthorizedClientScope
-from idpyoidc.server.exception import UnknownClient
-from idpyoidc.server.oauth2.authorization import FORM_POST
 from idpyoidc.server.oauth2.authorization import Authorization
-from idpyoidc.server.oauth2.authorization import get_uri
-from idpyoidc.server.oauth2.authorization import inputs
-from idpyoidc.server.oauth2.authorization import join_query
 from idpyoidc.server.oauth2.authorization import (
     validate_resource_indicators_policy as validate_authorization_resource_indicators_policy,
 )
-from idpyoidc.server.oauth2.authorization import verify_uri
 from idpyoidc.server.oauth2.token import Token
 from idpyoidc.server.oauth2.token_helper import (
     validate_resource_indicators_policy as validate_token_resource_indicators_policy,
@@ -104,6 +84,7 @@ USERINFO_db = json.loads(open(full_path("users.json")).read())
 
 
 class SimpleCookieDealer(object):
+
     def __init__(self, name=""):
         self.name = name
 
@@ -415,6 +396,7 @@ RESOURCE_INDICATORS_ENABLED = {
 
 
 class TestEndpoint(object):
+
     @pytest.fixture(autouse=False)
     def create_endpoint_ri_disabled(self):
         conf = RESOURCE_INDICATORS_DISABLED
@@ -423,9 +405,7 @@ class TestEndpoint(object):
         endpoint_context = server.context
         _clients = yaml.safe_load(io.StringIO(client_yaml))
         endpoint_context.cdb = _clients["clients"]
-        endpoint_context.keyjar.import_jwks(
-            endpoint_context.keyjar.export_jwks(True, ""), conf["issuer"]
-        )
+        endpoint_context.keyjar = store_under_other_id(endpoint_context.keyjar, "", conf["issuer"], True)
         self.endpoint_context = endpoint_context
         self.endpoint = server.get_endpoint("authorization")
         self.token_endpoint = server.get_endpoint("token")
@@ -446,9 +426,8 @@ class TestEndpoint(object):
         endpoint_context = server.context
         _clients = yaml.safe_load(io.StringIO(client_yaml))
         endpoint_context.cdb = _clients["clients"]
-        endpoint_context.keyjar.import_jwks(
-            endpoint_context.keyjar.export_jwks(True, ""), conf["issuer"]
-        )
+        endpoint_context.keyjar = store_under_other_id(endpoint_context.keyjar, "",
+                                                       conf["issuer"], True)
         self.endpoint_context = endpoint_context
         self.endpoint = server.get_endpoint("authorization")
         self.token_endpoint = server.get_endpoint("token")
@@ -529,7 +508,7 @@ class TestEndpoint(object):
             assert msg[key] == request[key]
 
     def test_authorization_code_req_no_resource_indicators_disabled(
-        self, create_endpoint_ri_disabled
+            self, create_endpoint_ri_disabled
     ):
         """
         Test successful authorization request when resource indicators is disabled.
diff --git a/tests/test_server_24_oauth2_token_endpoint.py b/tests/test_server_24_oauth2_token_endpoint.py
index 4d43d30..e78850a 100644
--- a/tests/test_server_24_oauth2_token_endpoint.py
+++ b/tests/test_server_24_oauth2_token_endpoint.py
@@ -1,14 +1,15 @@
 import json
 import os
 
+import pytest
 from cryptojwt import JWT
 from cryptojwt import KeyJar
 from cryptojwt.jws.jws import factory
 from cryptojwt.key_jar import build_keyjar
-import pytest
 
 from idpyoidc.context import OidcContext
 from idpyoidc.defaults import JWT_BEARER
+from idpyoidc.key_import import import_jwks
 from idpyoidc.message import Message
 from idpyoidc.message import REQUIRED_LIST_OF_STRINGS
 from idpyoidc.message import SINGLE_REQUIRED_INT
@@ -26,6 +27,7 @@ from idpyoidc.server.authz import AuthzHandling
 from idpyoidc.server.client_authn import verify_client
 from idpyoidc.server.configure import ASConfiguration
 from idpyoidc.server.exception import InvalidToken
+from idpyoidc.server.exception import UnAuthorizedClient
 from idpyoidc.server.oauth2.authorization import Authorization
 from idpyoidc.server.oauth2.token import Token
 from idpyoidc.server.token import handler
@@ -172,6 +174,7 @@ def conf():
 
 
 class TestEndpoint(object):
+
     @pytest.fixture(autouse=True)
     def create_endpoint(self, conf):
         server = Server(ASConfiguration(conf=conf, base_path=BASEDIR), cwd=BASEDIR)
@@ -184,7 +187,7 @@ class TestEndpoint(object):
             "response_types": ["code", "token", "code id_token", "id_token"],
             "allowed_scopes": ["openid", "profile", "email", "address", "phone", "offline_access"],
         }
-        server.keyjar.import_jwks(CLIENT_KEYJAR.export_jwks(), "client_1")
+        server.keyjar = import_jwks(server.keyjar, CLIENT_KEYJAR.export_jwks(), "client_1")
         self.session_manager = context.session_manager
         self.token_endpoint = server.get_endpoint("token")
         self.user_id = "diana"
@@ -342,7 +345,7 @@ class TestEndpoint(object):
         _resp = self.token_endpoint.process_request(request=_req)
 
         # 2nd time used
-        with pytest.raises(InvalidToken):
+        with pytest.raises((InvalidToken, UnAuthorizedClient)):
             self.token_endpoint.parse_request(_token_request)
 
     def test_do_refresh_access_token(self):
@@ -855,8 +858,8 @@ CONTEXT.cwd = BASEDIR
 CONTEXT.issuer = "https://op.example.com"
 CONTEXT.cdb = {"client_1": {}}
 KEYJAR = KeyJar()
-KEYJAR.import_jwks(CLIENT_KEYJAR.export_jwks(private=True), "client_1")
-KEYJAR.import_jwks(CLIENT_KEYJAR.export_jwks(private=True), "")
+KEYJAR = import_jwks(KEYJAR, CLIENT_KEYJAR.export_jwks(private=True), "client_1")
+KEYJAR = import_jwks(KEYJAR, CLIENT_KEYJAR.export_jwks(private=True), "")
 
 
 def upstream_get(what, *args):
@@ -919,6 +922,7 @@ def test_jwttoken_2():
 
 
 class TestClientCredentialsFlow(object):
+
     @pytest.fixture(autouse=True)
     def create_endpoint(self, conf):
         server = Server(ASConfiguration(conf=conf, base_path=BASEDIR), cwd=BASEDIR)
@@ -956,6 +960,7 @@ class TestClientCredentialsFlow(object):
 
 
 class TestResourceOwnerPasswordCredentialsFlow(object):
+
     @pytest.fixture(autouse=True)
     def create_endpoint(self, conf):
         conf["authentication"] = {
diff --git a/tests/test_server_24_oauth2_token_endpoint_def_conf.py b/tests/test_server_24_oauth2_token_endpoint_def_conf.py
index 9508002..2b181a2 100644
--- a/tests/test_server_24_oauth2_token_endpoint_def_conf.py
+++ b/tests/test_server_24_oauth2_token_endpoint_def_conf.py
@@ -8,10 +8,11 @@ from cryptojwt.key_jar import build_keyjar
 
 from idpyoidc.context import OidcContext
 from idpyoidc.defaults import JWT_BEARER
+from idpyoidc.key_import import import_jwks
+from idpyoidc.message import Message
 from idpyoidc.message import REQUIRED_LIST_OF_STRINGS
 from idpyoidc.message import SINGLE_REQUIRED_INT
 from idpyoidc.message import SINGLE_REQUIRED_STRING
-from idpyoidc.message import Message
 from idpyoidc.message.oauth2 import AccessTokenRequest
 from idpyoidc.message.oauth2 import AuthorizationRequest
 from idpyoidc.message.oauth2 import CCAccessTokenRequest
@@ -23,6 +24,7 @@ from idpyoidc.server import Server
 from idpyoidc.server.authn_event import create_authn_event
 from idpyoidc.server.configure import ASConfiguration
 from idpyoidc.server.exception import InvalidToken
+from idpyoidc.server.exception import UnAuthorizedClient
 from idpyoidc.server.token import handler
 from idpyoidc.time_util import utc_time_sans_frac
 from tests import CRYPT_CONFIG
@@ -64,6 +66,7 @@ def full_path(local_file):
 
 
 class TestEndpoint(object):
+
     @pytest.fixture(autouse=True)
     def create_endpoint(self):
         conf = {
@@ -83,7 +86,7 @@ class TestEndpoint(object):
             "response_types": ["code", "token", "code id_token", "id_token"],
             "allowed_scopes": ["openid", "profile", "email", "address", "phone", "offline_access"],
         }
-        server.keyjar.import_jwks(CLIENT_KEYJAR.export_jwks(), "client_1")
+        server.keyjar = import_jwks(server.keyjar, CLIENT_KEYJAR.export_jwks(), "client_1")
         self.session_manager = context.session_manager
         self.token_endpoint = server.get_endpoint("token")
         self.user_id = "diana"
@@ -241,7 +244,7 @@ class TestEndpoint(object):
         _resp = self.token_endpoint.process_request(request=_req)
 
         # 2nd time used
-        with pytest.raises(InvalidToken):
+        with pytest.raises((InvalidToken, UnAuthorizedClient)):
             self.token_endpoint.parse_request(_token_request)
 
     def test_do_refresh_access_token(self):
@@ -736,8 +739,8 @@ CONTEXT.cwd = BASEDIR
 CONTEXT.issuer = "https://op.example.com"
 CONTEXT.cdb = {"client_1": {}}
 KEYJAR = KeyJar()
-KEYJAR.import_jwks(CLIENT_KEYJAR.export_jwks(private=True), "client_1")
-KEYJAR.import_jwks(CLIENT_KEYJAR.export_jwks(private=True), "")
+KEYJAR = import_jwks(KEYJAR, CLIENT_KEYJAR.export_jwks(private=True), "client_1")
+KEYJAR = import_jwks(KEYJAR, CLIENT_KEYJAR.export_jwks(private=True), "")
 
 
 def upstream_get(what, *args):
@@ -800,6 +803,7 @@ def test_jwttoken_2():
 
 
 class TestClientCredentialsFlow(object):
+
     @pytest.fixture(autouse=True)
     def create_endpoint(self):
         conf = {
@@ -845,6 +849,7 @@ class TestClientCredentialsFlow(object):
 
 
 class TestResourceOwnerPasswordCredentialsFlow(object):
+
     @pytest.fixture(autouse=True)
     def create_endpoint(self):
         conf = {
diff --git a/tests/test_server_24_oidc_authorization_endpoint.py b/tests/test_server_24_oidc_authorization_endpoint.py
index 7facfcd..73f6524 100755
--- a/tests/test_server_24_oidc_authorization_endpoint.py
+++ b/tests/test_server_24_oidc_authorization_endpoint.py
@@ -15,6 +15,7 @@ from cryptojwt.utils import b64e
 
 from idpyoidc.exception import ParameterError
 from idpyoidc.exception import URIError
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message.oauth2 import AuthorizationErrorResponse
 from idpyoidc.message.oauth2 import ResponseMessage
 from idpyoidc.message.oidc import AuthorizationRequest
@@ -76,6 +77,8 @@ CAPABILITIES = {
         "urn:ietf:params:oauth:grant-type:jwt-bearer",
         "refresh_token",
     ],
+    "request_uri_parameter_supported": True,
+    "request_object_signing_alg_values_supported": ["HS256"]
 }
 
 CLAIMS = {"id_token": {"given_name": {"essential": True}, "nickname": None}}
@@ -157,7 +160,7 @@ class TestEndpoint(object):
             "issuer": "https://example.com/",
             "password": "mycket hemligt zebra",
             "verify_ssl": False,
-            "capabilities": CAPABILITIES,
+            "preference": CAPABILITIES,
             "keys": {"uri_path": "static/jwks.json", "key_defs": KEYDEFS},
             "token_handler_args": {
                 "jwks_file": "private/token_jwks.json",
@@ -287,7 +290,7 @@ class TestEndpoint(object):
 
         _clients = yaml.safe_load(io.StringIO(client_yaml))
         context.cdb = _clients["oidc_clients"]
-        server.keyjar.import_jwks(server.keyjar.export_jwks(True, ""), conf["issuer"])
+        server.keyjar = store_under_other_id(server.keyjar, "", conf["issuer"], True)
         self.context = context
         self.endpoint = server.get_endpoint("authorization")
         self.session_manager = context.session_manager
@@ -1191,7 +1194,7 @@ class TestACR(object):
 
         _clients = yaml.safe_load(io.StringIO(client_yaml))
         context.cdb = _clients["oidc_clients"]
-        server.keyjar.import_jwks(server.keyjar.export_jwks(True, ""), conf["issuer"])
+        server.keyjar = store_under_other_id(server.keyjar, "", conf["issuer"], True)
         self.endpoint = server.get_endpoint("authorization")
         self.session_manager = context.session_manager
         self.user_id = "diana"
diff --git a/tests/test_server_26_oidc_userinfo_endpoint.py b/tests/test_server_26_oidc_userinfo_endpoint.py
index 1d76e45..3cbb275 100755
--- a/tests/test_server_26_oidc_userinfo_endpoint.py
+++ b/tests/test_server_26_oidc_userinfo_endpoint.py
@@ -551,8 +551,9 @@ class TestEndpoint(object):
 
         monkeypatch.setattr("idpyoidc.server.token.utc_time_sans_frac", mock)
 
-        with pytest.raises(BearerTokenAuthenticationError):
-            self.endpoint.parse_request({}, http_info=http_info)
+        res = self.endpoint.parse_request({}, http_info=http_info)
+        assert "error" in res
+        assert res["error"] == "invalid_token"
 
     def test_userinfo_claims(self):
         _acr = "https://refeds.org/profile/mfa"
diff --git a/tests/test_server_30_oidc_end_session.py b/tests/test_server_30_oidc_end_session.py
index 95255a7..abbeb66 100644
--- a/tests/test_server_30_oidc_end_session.py
+++ b/tests/test_server_30_oidc_end_session.py
@@ -4,11 +4,13 @@ import os
 from urllib.parse import parse_qs
 from urllib.parse import urlparse
 
+from cryptojwt.key_jar import build_keyjar
 import pytest
 import responses
-from cryptojwt.key_jar import build_keyjar
 
+from idpyoidc import alg_info
 from idpyoidc.exception import InvalidRequest
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message import Message
 from idpyoidc.message.oidc import AuthorizationRequest
 from idpyoidc.message.oidc import verified_claim_name
@@ -43,7 +45,7 @@ KEYDEFS = [
 ]
 
 KEYJAR = build_keyjar(KEYDEFS)
-KEYJAR.import_jwks(KEYJAR.export_jwks(private=True), ISS)
+KEYJAR = store_under_other_id(KEYJAR, "", ISS, True)
 
 RESPONSE_TYPES_SUPPORTED = [["code"], ["id_token"], ["code", "id_token"]]
 
@@ -67,6 +69,7 @@ PREFRERENCES = {
     "claims_parameter_supported": True,
     "request_parameter_supported": True,
     "request_uri_parameter_supported": True,
+    "id_token_signing_alg_values_supported": alg_info.get_signing_algs()
 }
 
 AUTH_REQ = AuthorizationRequest(
diff --git a/tests/test_server_31_oauth2_introspection.py b/tests/test_server_31_oauth2_introspection.py
index bf28347..e5b597b 100644
--- a/tests/test_server_31_oauth2_introspection.py
+++ b/tests/test_server_31_oauth2_introspection.py
@@ -8,6 +8,7 @@ from cryptojwt import as_unicode
 from cryptojwt.key_jar import build_keyjar
 from cryptojwt.utils import as_bytes
 
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message.oauth2 import TokenIntrospectionRequest
 from idpyoidc.message.oidc import AccessTokenRequest
 from idpyoidc.message.oidc import AuthorizationRequest
@@ -207,9 +208,7 @@ class TestEndpoint:
             },
             "allowed_scopes": ["openid", "profile", "email", "address", "phone", "offline_access"],
         }
-        server.keyjar.import_jwks_as_json(
-            server.keyjar.export_jwks_as_json(private=True), context.issuer
-        )
+        server.keyjar = store_under_other_id(server.keyjar, "", context.issuer, True)
         self.introspection_endpoint = server.get_endpoint("introspection")
         self.token_endpoint = server.get_endpoint("token")
         self.session_manager = context.session_manager
@@ -325,7 +324,7 @@ class TestEndpoint:
         assert isinstance(msg_info, dict)
         assert set(msg_info.keys()) == {"response", "http_headers"}
         assert msg_info["http_headers"] == [
-            ("Content-type", "application/json; charset=utf-8"),
+            ("Content-type", "application/json"),
             ("Pragma", "no-cache"),
             ("Cache-Control", "no-store"),
         ]
diff --git a/tests/test_server_32_oidc_read_registration.py b/tests/test_server_32_oidc_read_registration.py
index e09bc5c..2dea641 100644
--- a/tests/test_server_32_oidc_read_registration.py
+++ b/tests/test_server_32_oidc_read_registration.py
@@ -160,4 +160,4 @@ class TestEndpoint(object):
 
         _endp_response = self.registration_api_endpoint.do_response(_info)
         assert set(_endp_response.keys()) == {"response", "http_headers"}
-        assert ("Content-type", "application/json; charset=utf-8") in _endp_response["http_headers"]
+        assert ("Content-type", "application/json") in _endp_response["http_headers"]
diff --git a/tests/test_server_33_oauth2_pkce.py b/tests/test_server_33_oauth2_pkce.py
index 60cf753..4a08f50 100644
--- a/tests/test_server_33_oauth2_pkce.py
+++ b/tests/test_server_33_oauth2_pkce.py
@@ -7,6 +7,7 @@ import string
 import pytest
 import yaml
 
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message import Message
 from idpyoidc.message.oauth2 import AuthorizationErrorResponse
 from idpyoidc.message.oidc import AccessTokenRequest
@@ -229,7 +230,7 @@ def create_server(config):
     context = server.context
     _clients = yaml.safe_load(io.StringIO(client_yaml))
     context.cdb = _clients["oidc_clients"]
-    server.keyjar.import_jwks(server.keyjar.export_jwks(True, ""), config["issuer"])
+    server.keyjar = store_under_other_id(server.keyjar, "", config["issuer"], True)
     return server
 
 
diff --git a/tests/test_server_34_oidc_sso.py b/tests/test_server_34_oidc_sso.py
index 4090b51..61fb38d 100755
--- a/tests/test_server_34_oidc_sso.py
+++ b/tests/test_server_34_oidc_sso.py
@@ -6,6 +6,7 @@ import pytest
 import yaml
 from cryptojwt import KeyJar
 
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message.oidc import AuthorizationRequest
 from idpyoidc.server import Server
 from idpyoidc.server.configure import OPConfiguration
@@ -199,7 +200,7 @@ class TestUserAuthn(object):
         context = server.context
         _clients = yaml.safe_load(io.StringIO(client_yaml))
         context.cdb = _clients["oidc_clients"]
-        server.keyjar.import_jwks(server.keyjar.export_jwks(True, ""), conf["issuer"])
+        server.keyjar = store_under_other_id(server.keyjar, "", conf["issuer"], True)
         self.endpoint = server.get_endpoint("authorization")
         self.context = context
         self.rp_keyjar = KeyJar()
diff --git a/tests/test_server_35_oidc_token_endpoint.py b/tests/test_server_35_oidc_token_endpoint.py
index d6af31e..c2371f3 100755
--- a/tests/test_server_35_oidc_token_endpoint.py
+++ b/tests/test_server_35_oidc_token_endpoint.py
@@ -6,6 +6,9 @@ import pytest
 from cryptojwt import JWT
 from cryptojwt.key_jar import build_keyjar
 
+from idpyoidc.key_import import import_jwks
+from idpyoidc.server.exception import UnAuthorizedClient
+
 from idpyoidc.defaults import JWT_BEARER
 from idpyoidc.message.oidc import AccessTokenRequest
 from idpyoidc.message.oidc import AuthorizationRequest
@@ -212,7 +215,7 @@ class TestEndpoint(_TestEndpoint):
             "response_types": ["code", "token", "code id_token", "id_token"],
             "allowed_scopes": ["openid", "profile", "email", "address", "phone", "offline_access"],
         }
-        self.server.keyjar.import_jwks(CLIENT_KEYJAR.export_jwks(), "client_1")
+        self.server.keyjar = import_jwks(self.server.keyjar, CLIENT_KEYJAR.export_jwks(), "client_1")
         context.userinfo = USERINFO
         self.session_manager = context.session_manager
         self.token_endpoint = self.server.get_endpoint("token")
@@ -350,7 +353,7 @@ class TestEndpoint(_TestEndpoint):
         _resp = self.token_endpoint.process_request(request=_req)
 
         # 2nd time used
-        with pytest.raises(InvalidToken):
+        with pytest.raises((InvalidToken, UnAuthorizedClient)):
             self.token_endpoint.parse_request(_token_request)
 
     def test_do_refresh_access_token(self):
@@ -1029,7 +1032,7 @@ class TestOldTokens(object):
             "response_types": ["code", "token", "code id_token", "id_token"],
             "allowed_scopes": ["openid", "profile", "email", "address", "phone", "offline_access"],
         }
-        server.keyjar.import_jwks(CLIENT_KEYJAR.export_jwks(), "client_1")
+        server.keyjar = import_jwks(server.keyjar, CLIENT_KEYJAR.export_jwks(), "client_1")
         self.session_manager = context.session_manager
         self.token_endpoint = server.get_endpoint("token")
         self.user_id = "diana"
diff --git a/tests/test_server_35_oidc_token_endpoint_def_conf.py b/tests/test_server_35_oidc_token_endpoint_def_conf.py
index f08fefa..74d4e87 100755
--- a/tests/test_server_35_oidc_token_endpoint_def_conf.py
+++ b/tests/test_server_35_oidc_token_endpoint_def_conf.py
@@ -4,6 +4,9 @@ import pytest
 from cryptojwt import JWT
 from cryptojwt.key_jar import build_keyjar
 
+from idpyoidc.key_import import import_jwks
+from idpyoidc.server.exception import UnAuthorizedClient
+
 from idpyoidc.client.defaults import DEFAULT_KEY_DEFS
 from idpyoidc.defaults import JWT_BEARER
 from idpyoidc.message.oidc import AccessTokenRequest
@@ -69,7 +72,7 @@ class TestEndpoint:
             "response_types": ["code", "token", "code id_token", "id_token"],
             "allowed_scopes": ["openid", "profile", "email", "address", "phone", "offline_access"],
         }
-        self.server.keyjar.import_jwks(CLIENT_KEYJAR.export_jwks(), "client_1")
+        self.server.keyjar = import_jwks(self.server.keyjar, CLIENT_KEYJAR.export_jwks(), "client_1")
         self.session_manager = context.session_manager
         self.token_endpoint = self.server.get_endpoint("token")
         self.user_id = "diana"
@@ -206,7 +209,7 @@ class TestEndpoint:
         _resp = self.token_endpoint.process_request(request=_req)
 
         # 2nd time used
-        with pytest.raises(InvalidToken):
+        with pytest.raises((InvalidToken, UnAuthorizedClient)):
             self.token_endpoint.parse_request(_token_request)
 
     def test_do_refresh_access_token(self):
diff --git a/tests/test_server_36_oauth2_token_exchange.py b/tests/test_server_36_oauth2_token_exchange.py
index 5b3a566..3a2b477 100644
--- a/tests/test_server_36_oauth2_token_exchange.py
+++ b/tests/test_server_36_oauth2_token_exchange.py
@@ -5,6 +5,7 @@ import pytest
 from cryptojwt.jwt import utc_time_sans_frac
 from cryptojwt.key_jar import build_keyjar
 
+from idpyoidc.key_import import import_jwks
 from idpyoidc.message.oauth2 import TokenExchangeRequest
 from idpyoidc.message.oidc import AccessTokenRequest
 from idpyoidc.message.oidc import AuthorizationRequest
@@ -80,6 +81,7 @@ USERINFO = UserInfo(json.loads(open(full_path("users.json")).read()))
 
 
 class TestEndpoint(object):
+
     @pytest.fixture(autouse=True)
     def create_endpoint(self):
         conf = {
@@ -199,7 +201,7 @@ class TestEndpoint(object):
             "response_types": ["code", "token", "code id_token", "id_token"],
             "allowed_scopes": ["openid", "profile", "offline_access"],
         }
-        server.keyjar.import_jwks(CLIENT_KEYJAR.export_jwks(), "client_1")
+        server.keyjar = import_jwks(server.keyjar, CLIENT_KEYJAR.export_jwks(), "client_1")
         self.endpoint = server.get_endpoint("token")
         self.introspection_endpoint = server.get_endpoint("introspection")
         self.session_manager = self.context.session_manager
@@ -646,8 +648,8 @@ class TestEndpoint(object):
         _resp = self.endpoint.process_request(request=_req)
         assert _resp["error"] == "invalid_request"
         assert (
-            _resp["error_description"]
-            == "Unsupported grant_type: urn:ietf:params:oauth:grant-type:token-exchange"
+                _resp["error_description"]
+                == "Unsupported grant_type: urn:ietf:params:oauth:grant-type:token-exchange"
         )
 
     def test_wrong_resource(self):
@@ -1374,7 +1376,7 @@ class TestEndpoint(object):
         _resp = self.endpoint.process_request(request=_req)
         assert _resp["error"] == "invalid_request"
         assert (
-            _resp["error_description"] == "Exchanging this subject token to refresh token forbidden"
+                _resp["error_description"] == "Exchanging this subject token to refresh token forbidden"
         )
 
         token_exchange_req["scope"] = "offline_access"
@@ -1454,7 +1456,7 @@ class TestEndpoint(object):
         _resp = self.endpoint.process_request(request=_req)
         assert _resp["error"] == "invalid_request"
         assert (
-            _resp["error_description"] == "Exchanging this subject token to refresh token forbidden"
+                _resp["error_description"] == "Exchanging this subject token to refresh token forbidden"
         )
 
         token_exchange_req["scope"] = "profile"
@@ -1466,7 +1468,7 @@ class TestEndpoint(object):
         _resp = self.endpoint.process_request(request=_req)
         assert _resp["error"] == "invalid_request"
         assert (
-            _resp["error_description"] == "Exchanging this subject token to refresh token forbidden"
+                _resp["error_description"] == "Exchanging this subject token to refresh token forbidden"
         )
 
         token_exchange_req["scope"] = "offline_access"
@@ -1488,5 +1490,5 @@ class TestEndpoint(object):
         _resp = self.endpoint.process_request(request=_req)
         assert _resp["error"] == "invalid_request"
         assert (
-            _resp["error_description"] == "Exchanging this subject token to refresh token forbidden"
+                _resp["error_description"] == "Exchanging this subject token to refresh token forbidden"
         )
diff --git a/tests/test_server_38_oauth2_revocation_endpoint.py b/tests/test_server_38_oauth2_revocation_endpoint.py
index ad83af1..e41c539 100644
--- a/tests/test_server_38_oauth2_revocation_endpoint.py
+++ b/tests/test_server_38_oauth2_revocation_endpoint.py
@@ -5,6 +5,7 @@ import pytest
 from cryptojwt import as_unicode
 from cryptojwt.utils import as_bytes
 
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message.oauth2 import TokenRevocationRequest
 from idpyoidc.message.oauth2 import TokenRevocationResponse
 from idpyoidc.message.oidc import AccessTokenRequest
@@ -86,6 +87,7 @@ def full_path(local_file):
 
 @pytest.mark.parametrize("jwt_token", [True, False])
 class TestEndpoint:
+
     @pytest.fixture(autouse=True)
     def create_endpoint(self, jwt_token):
         conf = {
@@ -216,10 +218,8 @@ class TestEndpoint:
                 "research_and_scholarship",
             ],
         }
-        endpoint_context.keyjar.import_jwks_as_json(
-            endpoint_context.keyjar.export_jwks_as_json(private=True),
-            endpoint_context.issuer,
-        )
+        endpoint_context.keyjar = store_under_other_id(endpoint_context.keyjar, "",
+                                                       endpoint_context.issuer, True)
         self.revocation_endpoint = server.get_endpoint("token_revocation")
         self.token_endpoint = server.get_endpoint("token")
         self.session_manager = endpoint_context.session_manager
diff --git a/tests/test_server_40_oauth2_pushed_authorization.py b/tests/test_server_40_oauth2_pushed_authorization.py
index 4d7ea6d..ef7d890 100644
--- a/tests/test_server_40_oauth2_pushed_authorization.py
+++ b/tests/test_server_40_oauth2_pushed_authorization.py
@@ -7,6 +7,8 @@ from cryptojwt import JWT
 from cryptojwt.jwt import remove_jwt_parameters
 from cryptojwt.key_jar import init_key_jar
 
+from idpyoidc.key_import import import_jwks
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message import Message
 from idpyoidc.message.oauth2 import AuthorizationRequest
 from idpyoidc.server import Server
@@ -73,6 +75,7 @@ AUTHN_REQUEST = (
 
 
 class TestEndpoint(object):
+
     @pytest.fixture(autouse=True)
     def create_endpoint(self):
         conf = {
@@ -167,11 +170,11 @@ class TestEndpoint(object):
         context = server.context
         _clients = yaml.safe_load(io.StringIO(client_yaml))
         context.cdb = verify_oidc_client_information(_clients["oidc_clients"])
-        server.keyjar.import_jwks(server.keyjar.export_jwks(True, ""), conf["issuer"])
+        server.keyjar = store_under_other_id(server.keyjar, "", conf["issuer"], True)
 
         self.rp_keyjar = init_key_jar(key_defs=KEYDEFS, issuer_id="s6BhdRkqt3")
         # Add RP's keys to the OP's keyjar
-        server.keyjar.import_jwks(self.rp_keyjar.export_jwks(issuer_id="s6BhdRkqt3"), "s6BhdRkqt3")
+        server.keyjar = import_jwks(server.keyjar, self.rp_keyjar.export_jwks(issuer_id="s6BhdRkqt3"), "s6BhdRkqt3")
 
         self.pushed_authorization_endpoint = server.get_endpoint("pushed_authorization")
         self.authorization_endpoint = server.get_endpoint("authorization")
@@ -251,7 +254,7 @@ class TestEndpoint(object):
 
         # And now for the authorization request with the OP provided request_uri
 
-        _msg["request_uri"] = _resp["http_response"]["request_uri"]
+        _msg["request_uri"] = _resp["response_args"]["request_uri"]
         for parameter in ["code_challenge", "code_challenge_method"]:
             del _msg[parameter]
 
diff --git a/tests/test_server_50_persistence.py b/tests/test_server_50_persistence.py
index adc31d9..c8ca5a5 100644
--- a/tests/test_server_50_persistence.py
+++ b/tests/test_server_50_persistence.py
@@ -6,6 +6,7 @@ import pytest
 from cryptojwt.jwt import utc_time_sans_frac
 from cryptojwt.key_jar import init_key_jar
 
+from idpyoidc.key_import import import_jwks_as_json
 from idpyoidc.message.oidc import AccessTokenRequest
 from idpyoidc.message.oidc import AuthorizationRequest
 from idpyoidc.server import Server
@@ -212,6 +213,7 @@ ENDPOINT_CONTEXT_CONFIG = {
 
 
 class TestEndpoint(object):
+
     @pytest.fixture(autouse=True)
     def create_endpoint(self):
         try:
@@ -221,9 +223,9 @@ class TestEndpoint(object):
 
         # Both have to use the same keyjar
         _keyjar = init_key_jar(key_defs=KEYDEFS)
-        _keyjar.import_jwks_as_json(
-            _keyjar.export_jwks_as_json(True, ""), ENDPOINT_CONTEXT_CONFIG["issuer"]
-        )
+        _keyjar = import_jwks_as_json(_keyjar,
+                                      _keyjar.export_jwks_as_json(True, ""),
+                                      ENDPOINT_CONTEXT_CONFIG["issuer"])
         server1 = Server(
             OPConfiguration(conf=ENDPOINT_CONTEXT_CONFIG, base_path=BASEDIR),
             cwd=BASEDIR,
@@ -351,14 +353,15 @@ class TestEndpoint(object):
 
     def test_init(self):
         assert self.endpoint[1]
-        assert set(self.endpoint[1].upstream_get("context").provider_info["scopes_supported"]) == {
-            "openid"
-        }
+
+        _context_1 = self.endpoint[1].upstream_get("context")
+        _context_2 = self.endpoint[2].upstream_get("context")
+
         assert (
-                self.endpoint[1].upstream_get("context").provider_info["claims_parameter_supported"]
-                == self.endpoint[2].upstream_get("context").provider_info[
-                    "claims_parameter_supported"]
+                _context_1.provider_info["claims_parameter_supported"] == _context_2.provider_info[
+            "claims_parameter_supported"]
         )
+        print(_context_1.provider_info.get("claims_parameter_supported"))
 
     def test_parse(self):
         session_id = self._create_session(AUTH_REQ, index=1)
diff --git a/tests/test_server_60_dpop.py b/tests/test_server_60_dpop.py
index e13b8a3..15ded45 100644
--- a/tests/test_server_60_dpop.py
+++ b/tests/test_server_60_dpop.py
@@ -1,11 +1,14 @@
 import os
 
-import pytest
 from cryptojwt.jwk.ec import ECKey
 from cryptojwt.jwk.ec import new_ec_key
 from cryptojwt.jws.jws import factory
 from cryptojwt.key_jar import init_key_jar
+import pytest
 
+from idpyoidc.client.defaults import DEFAULT_KEY_DEFS
+from idpyoidc.client.oauth2 import Client
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message.oauth2 import AccessTokenRequest
 from idpyoidc.message.oauth2 import AuthorizationRequest
 from idpyoidc.server import Server
@@ -14,14 +17,16 @@ from idpyoidc.server.authn_event import create_authn_event
 from idpyoidc.server.client_authn import verify_client
 from idpyoidc.server.configure import OPConfiguration
 from idpyoidc.server.oauth2.add_on.dpop import DPoPProof
-from idpyoidc.server.oauth2.add_on.dpop import token_post_parse_request
-from idpyoidc.server.oauth2.authorization import Authorization
+from idpyoidc.server.oidc.authorization import Authorization
 from idpyoidc.server.oidc.token import Token
+from idpyoidc.server.oidc.userinfo import UserInfo
 from idpyoidc.server.user_authn.authn_context import INTERNETPROTOCOLPASSWORD
 from idpyoidc.time_util import utc_time_sans_frac
 from tests import CRYPT_CONFIG
 from tests import SESSION_PARAMS
 
+_dirname = os.path.dirname(os.path.abspath(__file__))
+
 DPOP_HEADER = (
     "eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwieCI6Imw4dEZyaHgtMz"
     "R0VjNoUklDUkRZOXpDa0RscEJoRjQyVVFVZldWQVdCRnMiLCJ5IjoiOVZFNGpmX09rX282NHpiVFRsY3VOSmFq"
@@ -54,43 +59,13 @@ def test_verify_header():
     assert _dpop["htm"] == _dpop3["htm"]
 
 
-KEYDEFS = [
-    {"type": "RSA", "key": "", "use": ["sig"]},
-    {"type": "EC", "crv": "P-256", "use": ["sig"]},
-]
-
 ISSUER = "https://example.com/"
 
-KEYJAR = init_key_jar(key_defs=KEYDEFS, issuer_id=ISSUER)
-KEYJAR.import_jwks(KEYJAR.export_jwks(True, ISSUER), "")
-
-RESPONSE_TYPES_SUPPORTED = [
-    ["code"],
-    ["id_token"],
-    ["code", "id_token"],
-]
-
-CAPABILITIES = {
-    "response_types_supported": [" ".join(x) for x in RESPONSE_TYPES_SUPPORTED],
-    "token_endpoint_auth_methods_supported": [
-        "client_secret_post",
-        "client_secret_basic",
-        "client_secret_jwt",
-        "private_key_jwt",
-    ],
-    "response_modes_supported": ["query", "fragment", "form_post"],
-    "subject_types_supported": ["public", "pairwise", "ephemeral"],
-    "claim_types_supported": ["normal", "aggregated", "distributed"],
-    "claims_parameter_supported": True,
-    "request_parameter_supported": True,
-    # "request_uri_parameter_supported": True,
-}
+KEYJAR = init_key_jar(key_defs=DEFAULT_KEY_DEFS, issuer_id=ISSUER)
+KEYJAR = store_under_other_id(KEYJAR, ISSUER, "", True)
 
 AUTH_REQ = AuthorizationRequest(
-    client_id="client_1",
-    redirect_uri="https://example.com/cb",
     scope=["openid"],
-    state="STATE",
     response_type="code",
 )
 
@@ -105,90 +80,174 @@ TOKEN_REQ = AccessTokenRequest(
 BASEDIR = os.path.abspath(os.path.dirname(__file__))
 
 
-class TestEndpoint(object):
-    @pytest.fixture(autouse=True)
-    def create_endpoint(self):
-        conf = {
-            "issuer": ISSUER,
-            "httpc_params": {"verify": False, "timeout": 1},
-            "capabilities": CAPABILITIES,
-            "add_on": {
-                "dpop": {
-                    "function": "idpyoidc.server.oauth2.add_on.dpop.add_support",
-                    "kwargs": {"dpop_signing_alg_values_supported": ["ES256"]},
-                },
+def create_client():
+    config = {
+        "client_id": "client_1",
+        "client_secret": "a longesh password",
+        "redirect_uris": ["https://example.com/cli/authz_cb"],
+        "preference": {"response_types": ["code"]},
+        "add_ons": {
+            "dpop": {
+                "function": "idpyoidc.client.oauth2.add_on.dpop.add_support",
+                "kwargs": {"dpop_signing_alg_values_supported": ["ES256", "ES512"]},
+            }
+        },
+        "client_authn_methods": {
+            "dpop": {
+                "class": "idpyoidc.client.oauth2.add_on.dpop.DPoPClientAuth",
+                "kwargs": {}
+            }
+        }
+    }
+
+    services = {
+        "discovery": {"class": "idpyoidc.client.oauth2.server_metadata.ServerMetadata"},
+        "authorization": {"class": "idpyoidc.client.oauth2.authorization.Authorization"},
+        "access_token": {"class": "idpyoidc.client.oauth2.access_token.AccessToken"},
+        "refresh_access_token": {
+            "class": "idpyoidc.client.oauth2.refresh_access_token.RefreshAccessToken"
+        },
+        "userinfo": {"class": "idpyoidc.client.oidc.userinfo.UserInfo"},
+    }
+
+    CLI_KEY = init_key_jar(
+        public_path="{}/pub_client.jwks".format(_dirname),
+        private_path="{}/priv_client.jwks".format(_dirname),
+        key_defs=DEFAULT_KEY_DEFS,
+        issuer_id="client_id",
+    )
+
+    client = Client(keyjar=CLI_KEY, config=config, services=services)
+
+    client.get_context().provider_info = {
+        "authorization_endpoint": "https://example.com/auth",
+        "token_endpoint": "https://example.com/token",
+        "dpop_signing_alg_values_supported": ["RS256", "ES256"],
+        "userinfo_endpoint": "https://example.com/user",
+    }
+
+    return client
+
+
+def create_server():
+    RESPONSE_TYPES_SUPPORTED = [
+        ["code"],
+        ["id_token"],
+        ["code", "id_token"],
+    ]
+
+    CAPABILITIES = {
+        "response_types_supported": [" ".join(x) for x in RESPONSE_TYPES_SUPPORTED],
+        "token_endpoint_auth_methods_supported": [
+            "client_secret_post",
+            "client_secret_basic",
+            "client_secret_jwt",
+            "private_key_jwt",
+        ],
+        "response_modes_supported": ["query", "fragment", "form_post"],
+        "subject_types_supported": ["public", "pairwise", "ephemeral"],
+        "claim_types_supported": ["normal", "aggregated", "distributed"],
+        "claims_parameter_supported": True,
+        "request_parameter_supported": True,
+        # "request_uri_parameter_supported": True,
+        "client_authn_methods": {
+            "dpop": {
+                "class": "idpyoidc.server.oauth2.add_on.dpop.DPoPClientAuth"
+            }
+        }
+    }
+
+    conf = {
+        "issuer": ISSUER,
+        "httpc_params": {"verify": False, "timeout": 1},
+        "preference": CAPABILITIES,
+        "add_on": {
+            "dpop": {
+                "function": "idpyoidc.server.oauth2.add_on.dpop.add_support",
+                "kwargs": {"dpop_signing_alg_values_supported": ["ES256"]},
             },
-            "keys": {"uri_path": "jwks.json", "key_defs": KEYDEFS},
-            "token_handler_args": {
-                "jwks_file": "private/token_jwks.json",
-                "code": {"lifetime": 600, "kwargs": {"crypt_conf": CRYPT_CONFIG}},
-                "token": {
-                    "class": "idpyoidc.server.token.jwt_token.JWTToken",
-                    "kwargs": {
-                        "lifetime": 3600,
-                        "base_claims": {"eduperson_scoped_affiliation": None},
-                        "add_claims_by_scope": True,
-                        "aud": ["https://example.org/appl"],
-                    },
-                },
-                "refresh": {
-                    "class": "idpyoidc.server.token.jwt_token.JWTToken",
-                    "kwargs": {
-                        "lifetime": 3600,
-                        "aud": ["https://example.org/appl"],
-                    },
-                },
-                "id_token": {
-                    "class": "idpyoidc.server.token.id_token.IDToken",
-                    "kwargs": {
-                        "base_claims": {
-                            "email": {"essential": True},
-                            "email_verified": {"essential": True},
-                        }
-                    },
+        },
+        "keys": {"uri_path": "jwks.json", "key_defs": DEFAULT_KEY_DEFS},
+        "token_handler_args": {
+            "jwks_file": "private/token_jwks.json",
+            "code": {"lifetime": 600, "kwargs": {"crypt_conf": CRYPT_CONFIG}},
+            "token": {
+                "class": "idpyoidc.server.token.jwt_token.JWTToken",
+                "kwargs": {
+                    "lifetime": 3600,
+                    "base_claims": {"eduperson_scoped_affiliation": None},
+                    "add_claims_by_scope": True,
+                    "aud": ["https://example.org/appl"],
                 },
             },
-            "endpoint": {
-                "authorization": {
-                    "path": "{}/authorization",
-                    "class": Authorization,
-                    "kwargs": {},
+            "refresh": {
+                "class": "idpyoidc.server.token.jwt_token.JWTToken",
+                "kwargs": {
+                    "lifetime": 3600,
+                    "aud": ["https://example.org/appl"],
                 },
-                "token": {
-                    "path": "{}/token",
-                    "class": Token,
-                    "kwargs": {"client_authn_method": ["none"]},
+            },
+            "id_token": {
+                "class": "idpyoidc.server.token.id_token.IDToken",
+                "kwargs": {
+                    "base_claims": {
+                        "email": {"essential": True},
+                        "email_verified": {"essential": True},
+                    }
                 },
             },
-            "client_authn": verify_client,
-            "authentication": {
-                "anon": {
-                    "acr": INTERNETPROTOCOLPASSWORD,
-                    "class": "idpyoidc.server.user_authn.user.NoAuthn",
-                    "kwargs": {"user": "diana"},
-                }
+        },
+        "endpoint": {
+            "authorization": {
+                "path": "{}/authorization",
+                "class": Authorization,
+                "kwargs": {},
             },
-            "template_dir": "template",
-            "userinfo": {
-                "class": user_info.UserInfo,
-                "kwargs": {"db_file": "users.json"},
+            "token": {
+                "path": "{}/token",
+                "class": Token,
+                "kwargs": {"client_authn_method": ["client_secret_basic"]},
             },
-            "session_params": SESSION_PARAMS,
-        }
-        server = Server(OPConfiguration(conf, base_path=BASEDIR), keyjar=KEYJAR)
-        self.context = server.context
-        self.context.cdb["client_1"] = {
-            "client_secret": "hemligt",
-            "redirect_uris": [("https://example.com/cb", None)],
-            "client_salt": "salted",
-            "token_endpoint_auth_method": "client_secret_post",
-            "response_types": ["code", "token", "code id_token", "id_token"],
-            "allowed_scopes": ["openid", "profile", "email", "address", "phone", "offline_access"],
-        }
+            "user_info": {
+                "path": "{}/user",
+                "class": UserInfo,
+                "kwargs": {"client_authn_method": ["dpop"]},
+            },
+        },
+        "client_authn": verify_client,
+        "authentication": {
+            "anon": {
+                "acr": INTERNETPROTOCOLPASSWORD,
+                "class": "idpyoidc.server.user_authn.user.NoAuthn",
+                "kwargs": {"user": "diana"},
+            }
+        },
+        "template_dir": "template",
+        "userinfo": {
+            "class": user_info.UserInfo,
+            "kwargs": {"db_file": "users.json"},
+        },
+        "session_params": SESSION_PARAMS,
+    }
+    server = Server(OPConfiguration(conf, base_path=BASEDIR), keyjar=KEYJAR)
+    return server
+
+
+class TestEndpoint(object):
+    @pytest.fixture(autouse=True)
+    def create_setup(self):
+        self.server = create_server()
         self.user_id = "diana"
-        self.token_endpoint = server.get_endpoint("token")
+        self.token_endpoint = self.server.get_endpoint("token")
+        self.user_info_endpoint = self.server.get_endpoint("userinfo")
+
+        self.client = create_client()
+        self.context = self.server.context
+        self.context.cdb["client_1"] = self.client.context.prefers()
         self.session_manager = self.context.session_manager
 
+        self.authz_service = self.client.get_service("authorization")
+
     def _create_session(self, auth_req, sub_type="public", sector_identifier=""):
         if sector_identifier:
             authz_req = auth_req.copy()
@@ -201,72 +260,79 @@ class TestEndpoint(object):
             ae, authz_req, self.user_id, client_id=client_id, sub_type=sub_type
         )
 
-    def _mint_code(self, grant, client_id):
-        session_id = self.session_manager.encrypted_session_id(self.user_id, client_id, grant.id)
-        usage_rules = grant.usage_rules.get("authorization_code", {})
-        _exp_in = usage_rules.get("expires_in")
-
+    def _mint_token(self, token_class, grant, session_id, based_on=None, **kwargs):
         # Constructing an authorization code is now done
-        _code = grant.mint_token(
+        return grant.mint_token(
             session_id=session_id,
-            context=self.context,
-            token_class="authorization_code",
-            token_handler=self.session_manager.token_handler["authorization_code"],
-            usage_rules=usage_rules,
+            context=self.token_endpoint.upstream_get("context"),
+            token_class=token_class,
+            token_handler=self.session_manager.token_handler.handler[token_class],
+            expires_at=utc_time_sans_frac() + 300,  # 5 minutes from now
+            based_on=based_on,
+            **kwargs
         )
 
-        if _exp_in:
-            if isinstance(_exp_in, str):
-                _exp_in = int(_exp_in)
-            if _exp_in:
-                _code.expires_at = utc_time_sans_frac() + _exp_in
-        return _code
+    def _access_token_request_response(self):
+        # Authz
+        auth_req = AUTH_REQ.copy()
+        auth_req["client_id"] = self.client.client_id
+        _redirect_uri = self.client.context.claims.get_preference("redirect_uris")[0]
+        auth_req["redirect_uri"] = _redirect_uri
+        _context = self.client.context
+        auth_req["state"] = _context.cstate.create_state(iss=_context.get("issuer"))
+        session_id = self._create_session(auth_req)
+        # Consent handling
+        grant = self.token_endpoint.upstream_get("endpoint_context").authz(session_id, auth_req)
+        self.session_manager[session_id] = grant
+        code = self._mint_token("authorization_code", grant, session_id)
+        _context.cstate.update(auth_req["state"], auth_req)
+
+        # Access token request from the RP
+        token_serv = self.client.get_service("accesstoken")
+        req_args = {
+            "grant_type": "authorization_code",
+            "code": code.value,
+            "redirect_uri": _redirect_uri
+        }
+        req_info = token_serv.get_request_parameters(request_args=req_args, state=auth_req["state"])
+        assert "headers" in req_info
+        assert "dpop" in req_info["headers"]
+
+        # On the OP's side
+        req = self.token_endpoint.parse_request(
+            req_args,
+            http_info={"headers": req_info["headers"], "url": _redirect_uri, "method": "POST"})
+        resp = self.token_endpoint.process_request(req)
+        _context.cstate.update(auth_req["state"], resp["response_args"])
+        return resp, auth_req["state"]
 
     def test_post_parse_request(self):
-        auth_req = token_post_parse_request(
-            AUTH_REQ,
-            AUTH_REQ["client_id"],
-            self.context,
-            http_info={
-                "headers": {"dpop": DPOP_HEADER},
-                "url": "https://server.example.com/token",
-                "method": "POST",
-            },
-        )
-        assert auth_req
-        assert "dpop_jkt" in auth_req
+        # DPoP Access Token Request
+        _response, state = self._access_token_request_response()
+        assert "response_args" in _response
 
     def test_process_request(self):
-        session_id = self._create_session(AUTH_REQ)
-        grant = self.session_manager[session_id]
-        code = self._mint_code(grant, AUTH_REQ["client_id"])
-
-        _token_request = TOKEN_REQ.to_dict()
-        _context = self.context
-        _token_request["code"] = code.value
-        _req = self.token_endpoint.parse_request(
-            _token_request,
-            http_info={
-                "headers": {"dpop": DPOP_HEADER},
-                "url": "https://server.example.com/token",
-                "method": "POST",
-            },
-        )
+        _response, state = self._access_token_request_response()
+
+        # The RP creates the user info request
+        _user_info_service = self.client.get_service("userinfo")
+        _request = _user_info_service.get_request_parameters(state=state, authn_method="dpop")
 
-        assert "dpop_jkt" in _req
+        http_info = {
+            "headers": _request["headers"],
+            "method": _request["method"],
+            "url": _request["url"]
+        }
 
-        _resp = self.token_endpoint.process_request(request=_req)
-        assert _resp["response_args"]["token_type"] == "DPoP"
+        assert set(http_info["headers"].keys()) == {"Authorization", "dpop"}
+        assert http_info["headers"]["Authorization"].startswith("DPoP ")
 
-        access_token = _resp["response_args"]["access_token"]
-        jws = factory(access_token)
-        _payload = jws.jwt.payload()
-        assert "cnf" in _payload
-        assert _payload["cnf"]["jkt"] == _req["dpop_jkt"]
+        _jws = factory(http_info["headers"]["dpop"])
+        _payload = _jws.jwt.payload()
+        assert "htm" in _payload
+        assert "htu" in _payload
 
-        # Make sure DPoP also is in the session access token instance.
-        _session_info = self.session_manager.get_session_info_by_token(
-            access_token, handler_key="access_token"
-        )
-        _token = self.session_manager.find_token(_session_info["branch_id"], access_token)
-        assert _token.token_type == "DPoP"
+        _req = self.user_info_endpoint.parse_request(request=_request, http_info=http_info)
+        _resp = self.user_info_endpoint.process_request(_req)
+        assert _resp["response_args"]
+        assert "sub" in _resp["response_args"]
diff --git a/tests/test_server_61_add_on.py b/tests/test_server_61_add_on.py
index 9af7206..ac91951 100644
--- a/tests/test_server_61_add_on.py
+++ b/tests/test_server_61_add_on.py
@@ -4,6 +4,7 @@ from urllib.parse import urlparse
 import pytest
 from cryptojwt.key_jar import init_key_jar
 
+from idpyoidc.key_import import store_under_other_id
 from idpyoidc.message.oauth2 import AuthorizationRequest
 from idpyoidc.message.oauth2 import AuthorizationResponse
 from idpyoidc.server import Server
@@ -24,7 +25,7 @@ KEYDEFS = [
 ISSUER = "https://example.com/"
 
 KEYJAR = init_key_jar(key_defs=KEYDEFS, issuer_id=ISSUER)
-KEYJAR.import_jwks(KEYJAR.export_jwks(True, ISSUER), "")
+KEYJAR = store_under_other_id(KEYJAR, ISSUER, "", True)
 
 RESPONSE_TYPES_SUPPORTED = [
     ["code"],
diff --git a/tests/test_tandem_oauth2_add_on.py b/tests/test_tandem_oauth2_add_on.py
index a3776fc..000ab8a 100644
--- a/tests/test_tandem_oauth2_add_on.py
+++ b/tests/test_tandem_oauth2_add_on.py
@@ -5,6 +5,7 @@ from typing import List
 from cryptojwt.key_jar import build_keyjar
 
 from idpyoidc.client.oauth2 import Client
+from idpyoidc.key_import import import_jwks
 from idpyoidc.message.oauth2 import is_error_message
 from idpyoidc.message.oidc import AccessTokenRequest
 from idpyoidc.message.oidc import AuthorizationRequest
@@ -169,6 +170,7 @@ CLIENT_CONFIG = {
 
 
 class Flow(object):
+
     def __init__(self, client, server):
         self.client = client
         self.server = server
@@ -290,7 +292,7 @@ def test_pkce():
     )
 
     server.context.cdb["client"] = CLIENT_CONFIG
-    server.context.keyjar.import_jwks(client.keyjar.export_jwks(), "client")
+    server.context.keyjar = import_jwks(server.context.keyjar, client.keyjar.export_jwks(), "client")
 
     server.context.set_provider_info()
 
@@ -332,7 +334,7 @@ def test_jar():
     )
 
     server.context.cdb["client"] = CLIENT_CONFIG
-    server.context.keyjar.import_jwks(client.keyjar.export_jwks(), "client")
+    server.context.keyjar = import_jwks(server.context.keyjar, client.keyjar.export_jwks(), "client")
 
     server.context.set_provider_info()
 
diff --git a/tests/test_tandem_oauth2_code.py b/tests/test_tandem_oauth2_code.py
index 091a004..39bc376 100644
--- a/tests/test_tandem_oauth2_code.py
+++ b/tests/test_tandem_oauth2_code.py
@@ -5,6 +5,7 @@ import pytest
 from cryptojwt.key_jar import build_keyjar
 
 from idpyoidc.client.oauth2 import Client
+from idpyoidc.key_import import import_jwks
 from idpyoidc.message.oauth2 import is_error_message
 from idpyoidc.message.oidc import AccessTokenRequest
 from idpyoidc.message.oidc import AuthorizationRequest
@@ -13,7 +14,6 @@ from idpyoidc.server import Server
 from idpyoidc.server.authz import AuthzHandling
 from idpyoidc.server.client_authn import verify_client
 from idpyoidc.server.configure import ASConfiguration
-from idpyoidc.server.cookie_handler import CookieHandler
 from idpyoidc.server.user_authn.authn_context import INTERNETPROTOCOLPASSWORD
 from idpyoidc.server.user_info import UserInfo
 from idpyoidc.util import rndstr
@@ -72,6 +72,7 @@ _OAUTH2_SERVICES = {
 
 
 class TestFlow(object):
+
     @pytest.fixture(autouse=True)
     def create_entities(self):
         server_conf = {
@@ -170,7 +171,7 @@ class TestFlow(object):
 
         self.context = self.server.context
         self.context.cdb["client_1"] = client_1_config
-        self.context.keyjar.import_jwks(self.client.keyjar.export_jwks(), "client_1")
+        self.context.keyjar = import_jwks(self.context.keyjar, self.client.keyjar.export_jwks(), "client_1")
 
         self.context.set_provider_info()
         self.session_manager = self.context.session_manager
diff --git a/tests/test_tandem_oauth2_par_service.py b/tests/test_tandem_oauth2_par_service.py
new file mode 100644
index 0000000..9630a55
--- /dev/null
+++ b/tests/test_tandem_oauth2_par_service.py
@@ -0,0 +1,285 @@
+import json
+import os
+
+import pytest
+from cryptojwt.key_jar import build_keyjar
+
+from idpyoidc.client.oauth2 import Client
+from idpyoidc.key_import import import_jwks
+from idpyoidc.message.oauth2 import is_error_message
+from idpyoidc.message.oidc import AccessTokenRequest
+from idpyoidc.message.oidc import AuthorizationRequest
+from idpyoidc.message.oidc import RefreshAccessTokenRequest
+from idpyoidc.server import Server
+from idpyoidc.server.authz import AuthzHandling
+from idpyoidc.server.client_authn import verify_client
+from idpyoidc.server.configure import ASConfiguration
+from idpyoidc.server.user_authn.authn_context import INTERNETPROTOCOLPASSWORD
+from idpyoidc.server.user_info import UserInfo
+from idpyoidc.util import rndstr
+from tests import CRYPT_CONFIG
+from tests import SESSION_PARAMS
+
+KEYDEFS = [
+    {"type": "RSA", "key": "", "use": ["sig"]},
+    {"type": "EC", "crv": "P-256", "use": ["sig"]},
+]
+
+CLIENT_KEYJAR = build_keyjar(KEYDEFS)
+
+COOKIE_KEYDEFS = [
+    {"type": "oct", "kid": "sig", "use": ["sig"]},
+    {"type": "oct", "kid": "enc", "use": ["enc"]},
+]
+
+AUTH_REQ = AuthorizationRequest(
+    client_id="client_1",
+    redirect_uri="https://example.com/cb",
+    scope=["openid"],
+    state="STATE",
+    response_type="code",
+)
+
+TOKEN_REQ = AccessTokenRequest(
+    client_id="client_1",
+    redirect_uri="https://example.com/cb",
+    state="STATE",
+    grant_type="authorization_code",
+    client_secret="hemligt",
+)
+
+REFRESH_TOKEN_REQ = RefreshAccessTokenRequest(
+    grant_type="refresh_token", client_id="https://example.com/", client_secret="hemligt"
+)
+
+TOKEN_REQ_DICT = TOKEN_REQ.to_dict()
+
+BASEDIR = os.path.abspath(os.path.dirname(__file__))
+
+
+def full_path(local_file):
+    return os.path.join(BASEDIR, local_file)
+
+
+USERINFO = UserInfo(json.loads(open(full_path("users.json")).read()))
+
+_OAUTH2_SERVICES = {
+    "metadata": {"class": "idpyoidc.client.oauth2.server_metadata.ServerMetadata"},
+    "authorization": {"class": "idpyoidc.client.oauth2.authorization.Authorization"},
+    "pushed_authorization": {"class": "idpyoidc.client.oauth2.pushed_authorization.PushedAuthorization"},
+    "access_token": {"class": "idpyoidc.client.oauth2.access_token.AccessToken"},
+    "resource": {"class": "idpyoidc.client.oauth2.resource.Resource"},
+}
+
+
+class TestFlow(object):
+
+    @pytest.fixture(autouse=True)
+    def create_entities(self):
+        server_conf = {
+            "issuer": "https://example.com/",
+            "httpc_params": {"verify": False, "timeout": 1},
+            "subject_types_supported": ["public", "pairwise", "ephemeral"],
+            "keys": {"uri_path": "jwks.json", "key_defs": KEYDEFS},
+            "endpoint": {
+                "metadata": {
+                    "path": ".well-known/oauth-authorization-server",
+                    "class": "idpyoidc.server.oauth2.server_metadata.ServerMetadata",
+                    "kwargs": {},
+                },
+                "authorization": {
+                    "path": "authorization",
+                    "class": "idpyoidc.server.oauth2.authorization.Authorization",
+                    "kwargs": {},
+                },
+                "pushed_authorization": {
+                    "path": "par",
+                    "class": "idpyoidc.server.oauth2.pushed_authorization.PushedAuthorization",
+                    "kwargs": {},
+                },
+                "token": {
+                    "path": "token",
+                    "class": "idpyoidc.server.oauth2.token.Token",
+                    "kwargs": {},
+                },
+            },
+            "authentication": {
+                "anon": {
+                    "acr": INTERNETPROTOCOLPASSWORD,
+                    "class": "idpyoidc.server.user_authn.user.NoAuthn",
+                    "kwargs": {"user": "diana"},
+                }
+            },
+            "userinfo": {"class": UserInfo, "kwargs": {"db": {}}},
+            "client_authn": verify_client,
+            "authz": {
+                "class": AuthzHandling,
+                "kwargs": {
+                    "grant_config": {
+                        "usage_rules": {
+                            "authorization_code": {
+                                "supports_minting": ["access_token", "refresh_token"],
+                                "max_usage": 1,
+                            },
+                            "access_token": {
+                                "supports_minting": ["access_token", "refresh_token"],
+                                "expires_in": 600,
+                            },
+                            "refresh_token": {
+                                "supports_minting": ["access_token"],
+                                "audience": ["https://example.com", "https://example2.com"],
+                                "expires_in": 43200,
+                            },
+                        },
+                        "expires_in": 43200,
+                    }
+                },
+            },
+            "token_handler_args": {
+                "jwks_file": "private/token_jwks.json",
+                "code": {"lifetime": 600, "kwargs": {"crypt_conf": CRYPT_CONFIG}},
+                "token": {
+                    "class": "idpyoidc.server.token.jwt_token.JWTToken",
+                    "kwargs": {
+                        "lifetime": 3600,
+                        "add_claims_by_scope": True,
+                        "aud": ["https://example.org/appl"],
+                    },
+                },
+                "refresh": {
+                    "class": "idpyoidc.server.token.jwt_token.JWTToken",
+                    "kwargs": {
+                        "lifetime": 3600,
+                        "aud": ["https://example.org/appl"],
+                    },
+                },
+            },
+            "session_params": SESSION_PARAMS,
+        }
+        self.server = Server(ASConfiguration(conf=server_conf, base_path=BASEDIR), cwd=BASEDIR)
+
+        client_1_config = {
+            "issuer": server_conf["issuer"],
+            "client_secret": "hemligtlösenord",
+            "client_id": "client_1",
+            "redirect_uris": ["https://example.com/cb"],
+            "client_salt": "salted_peanuts_cooking",
+            "token_endpoint_auth_methods_supported": ["client_secret_post"],
+            "response_types_supported": ["code"],
+        }
+        client_services = _OAUTH2_SERVICES
+        self.client = Client(
+            client_type="oauth2",
+            config=client_1_config,
+            keyjar=build_keyjar(KEYDEFS),
+            services=_OAUTH2_SERVICES,
+        )
+
+        self.context = self.server.context
+        self.context.cdb["client_1"] = client_1_config
+        self.context.keyjar = import_jwks(self.context.keyjar, self.client.keyjar.export_jwks(), "client_1")
+
+        self.context.set_provider_info()
+        self.session_manager = self.context.session_manager
+        self.user_id = "diana"
+
+    def do_query(self, service_type, endpoint_type, request_args, state):
+        _client_service = self.client.get_service(service_type)
+        req_info = _client_service.get_request_parameters(request_args=request_args, state=state)
+
+        areq = req_info.get("request")
+        headers = req_info.get("headers")
+
+        _server_endpoint = self.server.get_endpoint(endpoint_type)
+        if areq:
+            if headers:
+                argv = {"http_info": {"headers": headers}}
+            else:
+                argv = {}
+            areq.lax = True
+            _req = areq.serialize(_server_endpoint.request_format)
+            _pr_resp = _server_endpoint.parse_request(_req, **argv)
+        else:
+            _pr_resp = _server_endpoint.parse_request(areq)
+
+        if is_error_message(_pr_resp):
+            return areq, _pr_resp
+
+        _resp = _server_endpoint.process_request(_pr_resp)
+        if is_error_message(_resp):
+            return areq, _resp
+
+        _response = _server_endpoint.do_response(**_resp)
+
+        resp = _client_service.parse_response(_response["response"])
+        _client_service.update_service_context(_resp["response_args"], key=state)
+        return areq, resp
+
+    def process_setup(self, token=None, scope=None):
+        # ***** Discovery *********
+
+        _req, _resp = self.do_query("server_metadata", "server_metadata", {}, "")
+
+        # ***** Pushed Authorization Request **********
+        _nonce = (rndstr(24),)
+        _context = self.client.get_service_context()
+        # Need a new state for a new authorization request
+        _state = _context.cstate.create_state(iss=_context.get("issuer"))
+        _context.cstate.bind_key(_nonce, _state)
+
+        req_args = {"response_type": ["code"], "nonce": _nonce, "state": _state}
+
+        if scope:
+            _scope = scope
+        else:
+            _scope = ["openid"]
+
+            if token and list(token.keys())[0] == "refresh_token":
+                _scope = ["openid", "offline_access"]
+
+        req_args["scope"] = _scope
+
+        areq, auth_response = self.do_query("pushed_authorization",
+                                            "pushed_authorization",
+                                            req_args,
+                                            _state)
+
+        # ***** Authorization Request **********
+        _context = self.client.get_service_context()
+
+        req_args = {"request_uri": auth_response["request_uri"], "response_type": ["code"]}
+
+        areq, auth_response = self.do_query("authorization", "authorization", req_args, _state)
+
+        # ***** Token Request **********
+
+        req_args = {
+            "code": auth_response["code"],
+            "state": auth_response["state"],
+            "redirect_uri": areq["redirect_uri"],
+            "grant_type": "authorization_code",
+            "client_id": self.client.get_client_id(),
+            "client_secret": _context.get_usage("client_secret"),
+        }
+
+        _token_request, resp = self.do_query("accesstoken", "token", req_args, _state)
+
+        return resp, _state, _scope
+
+    def test_flow(self):
+        """
+        Test that token exchange requests work correctly
+        """
+
+        resp, _state, _scope = self.process_setup(token="access_token", scope=["foobar"])
+
+        # Construct the resource request
+
+        _client_service = self.client.get_service("resource")
+        req_info = _client_service.get_request_parameters(
+            authn_method="bearer_header", state=_state, endpoint="https://resource.example.com"
+        )
+
+        assert req_info["url"] == "https://resource.example.com"
+        assert "Authorization" in req_info["headers"]
+        assert req_info["headers"]["Authorization"].startswith("Bearer")
diff --git a/tests/test_tandem_oauth2_token_exchange.py b/tests/test_tandem_oauth2_token_exchange.py
index 6b722d3..15e9e67 100644
--- a/tests/test_tandem_oauth2_token_exchange.py
+++ b/tests/test_tandem_oauth2_token_exchange.py
@@ -5,6 +5,7 @@ import pytest
 from cryptojwt.key_jar import build_keyjar
 
 from idpyoidc.client.oauth2 import Client
+from idpyoidc.key_import import import_jwks
 from idpyoidc.message.oauth2 import is_error_message
 from idpyoidc.message.oidc import AccessTokenRequest
 from idpyoidc.message.oidc import AuthorizationRequest
@@ -212,8 +213,8 @@ class TestEndpoint(object):
         self.context = self.server.context
         self.context.cdb["client_1"] = client_1_config
         self.context.cdb["client_2"] = client_2_config
-        self.context.keyjar.import_jwks(self.client_1.keyjar.export_jwks(), "client_1")
-        self.context.keyjar.import_jwks(self.client_2.keyjar.export_jwks(), "client_2")
+        self.context.keyjar = import_jwks(self.context.keyjar, self.client_1.keyjar.export_jwks(), "client_1")
+        self.context.keyjar = import_jwks(self.context.keyjar, self.client_2.keyjar.export_jwks(), "client_2")
 
         self.context.set_provider_info()
 
diff --git a/tests/test_tandem_oauth2_token_revocation.py b/tests/test_tandem_oauth2_token_revocation.py
index 92d4430..6845cd9 100644
--- a/tests/test_tandem_oauth2_token_revocation.py
+++ b/tests/test_tandem_oauth2_token_revocation.py
@@ -4,6 +4,7 @@ import pytest
 from cryptojwt.key_jar import build_keyjar
 
 from idpyoidc.client.oauth2 import Client
+from idpyoidc.key_import import import_jwks
 from idpyoidc.message.oauth2 import is_error_message
 from idpyoidc.server import ASConfiguration
 from idpyoidc.server import Server
@@ -137,7 +138,7 @@ class TestClient(object):
         # ------- tell the server about the client ----------------
         self.context = self.server.context
         self.context.cdb["client_1"] = client_conf
-        self.context.keyjar.import_jwks(self.client.keyjar.export_jwks(), "client_1")
+        self.context.keyjar = import_jwks(self.context.keyjar, self.client.keyjar.export_jwks(), "client_1")
 
     def do_query(self, service_type, endpoint_type, request_args, state):
         _client = self.client.get_service(service_type)
diff --git a/tests/test_tandem_oidc_code.py b/tests/test_tandem_oidc_code.py
index 5f11f4a..9b575aa 100644
--- a/tests/test_tandem_oidc_code.py
+++ b/tests/test_tandem_oidc_code.py
@@ -5,6 +5,7 @@ import pytest
 from cryptojwt.key_jar import build_keyjar
 
 from idpyoidc.client.oidc import RP
+from idpyoidc.key_import import import_jwks
 from idpyoidc.message.oauth2 import is_error_message
 from idpyoidc.message.oidc import AccessTokenRequest
 from idpyoidc.message.oidc import AuthorizationRequest
@@ -74,6 +75,7 @@ _OIDC_SERVICES = {
 
 
 class TestFlow(object):
+
     @pytest.fixture(autouse=True)
     def create_entities(self):
         server_conf = {
@@ -81,6 +83,7 @@ class TestFlow(object):
             "httpc_params": {"verify": False, "timeout": 1},
             "subject_types_supported": ["public", "pairwise", "ephemeral"],
             "keys": {"uri_path": "jwks.json", "key_defs": KEYDEFS},
+            "scopes_supported": ["openid", "profile", "email", "offline_access", "address", "phone"],
             "endpoint": {
                 "provider_info": {
                     "path": ".well-known/openid-configuration",
@@ -180,12 +183,13 @@ class TestFlow(object):
             "redirect_uris": ["https://example.com/cb"],
             "token_endpoint_auth_methods_supported": ["client_secret_post"],
             "response_types_supported": ["code", "id_token", "id_token token"],
+            "preference": {"scopes_supported": ["openid", "profile"]}
         }
         self.rp = RP(config=client_config, keyjar=build_keyjar(KEYDEFS), services=_OIDC_SERVICES)
 
         self.context = self.server.context
         # self.context.cdb["client_1"] = client_config
-        # self.context.keyjar.import_jwks(self.rp.keyjar.export_jwks(), "client_1")
+        # self.context.keyjar = import_jwks(self.context.keyjar, self.rp.keyjar.export_jwks(), "client_1")
 
         self.context.set_provider_info()
         # self.session_manager = self.context.session_manager
@@ -225,10 +229,11 @@ class TestFlow(object):
         _client_service.update_service_context(_resp["response_args"], key=state)
         # Fake key import
         if service_type == "provider_info":
-            _client_service.upstream_get("attribute", "keyjar").import_jwks(
-                _server_endpoint.upstream_get("attribute", "keyjar").export_jwks(),
-                issuer_id=_server_endpoint.upstream_get("attribute", "issuer"),
-            )
+            _keyjar = _client_service.upstream_get("attribute", "keyjar")
+            _keyjar = import_jwks(_keyjar,
+                                  _server_endpoint.upstream_get("attribute", "keyjar").export_jwks(),
+                                  _server_endpoint.upstream_get("attribute", "issuer"))
+
         return areq, resp
 
     def process_setup(self, token=None, scope=None):
@@ -252,10 +257,13 @@ class TestFlow(object):
         if scope:
             _scope = scope
         else:
-            _scope = ["openid"]
-
-            if token and list(token.keys())[0] == "refresh_token":
-                _scope = ["openid", "offline_access"]
+            _scope = _context.claims.get_usage("scope", None)
+            if not _scope:
+                if token:
+                    if isinstance(token, list) and list(token.keys())[0] == "refresh_token":
+                        _scope = ["openid", "offline_access"]
+                else:
+                    _scope = ["openid"]
 
         req_args["scope"] = _scope
 
@@ -281,13 +289,11 @@ class TestFlow(object):
         Test that token exchange requests work correctly
         """
 
-        resp, _state, _scope = self.process_setup(
-            token="access_token",
-            scope=["openid", "profile", "email", "address", "phone", "offline_access"],
-        )
+        resp, _state, _scope = self.process_setup(token="access_token")
 
         # The User Info request
 
         _request, resp = self.do_query("userinfo", "userinfo", {}, _state)
 
         assert resp
+        assert "given_name" in resp
diff --git a/tests/test_y_actor_01.py b/tests/test_y_actor_01.py
deleted file mode 100644
index e69de29..0000000
diff --git a/tests/x_test_ciba_01_backchannel_auth.py b/tests/x_test_ciba_01_backchannel_auth.py
index 62d79ac..bc4f67f 100644
--- a/tests/x_test_ciba_01_backchannel_auth.py
+++ b/tests/x_test_ciba_01_backchannel_auth.py
@@ -487,133 +487,133 @@ CLI_KEY = init_key_jar(
 )
 
 
-class TestBCAEndpointService(object):
-    @pytest.fixture(autouse=True)
-    def create_endpoint(self):
-        self.ciba = {"self.server": self._create_self.server(), "client": self._create_ciba_client()}
-
-    def _create_self.server(self):
-        self.server = Server(OPConfiguration(SERVER_CONF, base_path=BASEDIR))
-        context = self.server.context
-        context.cdb["client_1"] = {
-            "client_secret": "hemligt",
-            "redirect_uris": [("https://example.com/cb", None)],
-            "client_salt": "salted",
-            "token_endpoint_auth_method": "client_secret_post",
-            "response_types": ["code", "token", "code id_token", "id_token"],
-        }
-
-        client_keyjar = build_keyjar(KEYDEFS)
-        # Add self.servers keys
-        client_keyjar.import_jwks(self.server.keyjar.export_jwks(), ISSUER)
-        # The only own key the client has a this point
-        client_keyjar.add_symmetric("", CLIENT_SECRET, ["sig"])
-        # Need to add the client_secret as a symmetric key bound to the client_id
-        self.server.keyjar.add_symmetric(CLIENT_ID, CLIENT_SECRET, ["sig"])
-        self.server.keyjar.import_jwks(client_keyjar.export_jwks(), CLIENT_ID)
-
-        self.server.context.cdb = {CLIENT_ID: {"client_secret": CLIENT_SECRET}}
-        # login_hint
-        self.server.context.login_hint_lookup = init_service(
-            {"class": "idpyoidc.self.server.login_hint.LoginHintLookup"}, None
-        )
-        # userinfo
-        _userinfo = init_user_info(
-            {
-                "class": "idpyoidc.self.server.user_info.UserInfo",
-                "kwargs": {"db_file": full_path("users.json")},
-            },
-            "",
-        )
-        self.server.context.login_hint_lookup.userinfo = _userinfo
-        return self.server
-
-    def _create_ciba_client(self):
-        config = {
-            "client_id": CLIENT_ID,
-            "client_secret": CLIENT_SECRET,
-            "redirect_uris": ["https://example.com/cb"],
-            "services": {
-                "client_notification": {
-                    "class": "idpyoidc.client.oidc.backchannel_authentication.ClientNotification",
-                    "kwargs": {"conf": {"default_authn_method": "client_notification_authn"}},
-                },
-            },
-            "client_authn_methods": {
-                "client_notification_authn": {
-                    'class': "idpyoidc.client.oidc.backchannel_authentication.ClientNotificationAuthn"
-                }
-            },
-        }
-
-        client = Client(keyjar=CLI_KEY, config=config, services=DEFAULT_OAUTH2_SERVICES)
-
-        client.upstream_get("context").provider_info = {
-            "client_notification_endpoint": "https://example.com/notify",
-        }
-
-        return client
-
-    def _create_session(self, user_id, auth_req, sub_type="public", sector_identifier=""):
-        if sector_identifier:
-            authz_req = auth_req.copy()
-            authz_req["sector_identifier_uri"] = sector_identifier
-        else:
-            authz_req = auth_req
-        client_id = authz_req["client_id"]
-        ae = create_authn_event(user_id)
-        _session_manager = self.ciba["self.server"].context.session_manager
-        return _session_manager.create_session(
-            ae, authz_req, user_id, client_id=client_id, sub_type=sub_type
-        )
-
-    def test_client_notification(self):
-        _keyjar = self.ciba["self.server"].context.keyjar
-        _jwt = JWT(_keyjar, iss=CLIENT_ID, sign_alg="HS256")
-        _jwt.with_jti = True
-        _assertion = _jwt.pack({"aud": [ISSUER]})
-
-        request = {
-            "client_assertion": _assertion,
-            "client_assertion_type": JWT_BEARER,
-            "scope": "openid email example-scope",
-            "client_notification_token": "8d67dc78-7faa-4d41-aabd-67707b374255",
-            "binding_message": "W4SCT",
-            "login_hint": "mail:diana@example.org",
-        }
-
-        _authn_endpoint = self.ciba["self.server"].upstream_get("endpoint", "backchannel_authentication")
-
-        req = AuthenticationRequest(**request)
-        req = _authn_endpoint.parse_request(req.to_urlencoded())
-        _info = _authn_endpoint.process_request(req)
-        assert _info
-
-        _session_manager = self.ciba["self.server"].context.session_manager
-        sid = _session_manager.auth_req_id_map[_info["response_args"]["auth_req_id"]]
-        _user_id, _client_id, _grant_id = _session_manager.decrypt_session_id(sid)
-
-        # Some time passes and the client authentication is successfully performed
-        # The interaction with the authentication device is not shown
-        session_id_2 = self._create_session(_user_id, req)
-
-        # Now it's time to send a client notification
-        req_args = {
-            "auth_req_id": _info["response_args"]["auth_req_id"],
-            "client_notification_token": request["client_notification_token"],
-        }
-
-        _service = self.ciba["client"].upstream_get("service", "client_notification")
-        _req_param = _service.get_request_parameters(request_args=req_args)
-        assert _req_param
-        assert isinstance(_req_param["request"], NotificationRequest)
-        assert set(_req_param.keys()) == {"method", "request", "url", "body", "headers"}
-        assert _req_param["method"] == "POST"
-        # This is the client's notification endpoint
-        assert (
-            _req_param["url"]
-            == self.ciba["client"]
-            .upstream_get("context")
-            .provider_info["client_notification_endpoint"]
-        )
-        assert set(_req_param["request"].keys()) == {"auth_req_id", "client_notification_token"}
+# class TestBCAEndpointServi ce(object):
+#     @pytest.fixture(autouse=True)
+#     def create_endpoint(self):
+#         self.ciba = {"self.server": self._create_self.server(), "client": self._create_ciba_client()}
+#
+#     def _create_self.server(self):
+#         self.server = Server(OPConfiguration(SERVER_CONF, base_path=BASEDIR))
+#         context = self.server.context
+#         context.cdb["client_1"] = {
+#             "client_secret": "hemligt",
+#             "redirect_uris": [("https://example.com/cb", None)],
+#             "client_salt": "salted",
+#             "token_endpoint_auth_method": "client_secret_post",
+#             "response_types": ["code", "token", "code id_token", "id_token"],
+#         }
+#
+#         client_keyjar = build_keyjar(KEYDEFS)
+#         # Add self.servers keys
+#         client_keyjar.import_jwks(self.server.keyjar.export_jwks(), ISSUER)
+#         # The only own key the client has a this point
+#         client_keyjar.add_symmetric("", CLIENT_SECRET, ["sig"])
+#         # Need to add the client_secret as a symmetric key bound to the client_id
+#         self.server.keyjar.add_symmetric(CLIENT_ID, CLIENT_SECRET, ["sig"])
+#         self.server.keyjar.import_jwks(client_keyjar.export_jwks(), CLIENT_ID)
+#
+#         self.server.context.cdb = {CLIENT_ID: {"client_secret": CLIENT_SECRET}}
+#         # login_hint
+#         self.server.context.login_hint_lookup = init_service(
+#             {"class": "idpyoidc.self.server.login_hint.LoginHintLookup"}, None
+#         )
+#         # userinfo
+#         _userinfo = init_user_info(
+#             {
+#                 "class": "idpyoidc.self.server.user_info.UserInfo",
+#                 "kwargs": {"db_file": full_path("users.json")},
+#             },
+#             "",
+#         )
+#         self.server.context.login_hint_lookup.userinfo = _userinfo
+#         return self.server
+#
+#     def _create_ciba_client(self):
+#         config = {
+#             "client_id": CLIENT_ID,
+#             "client_secret": CLIENT_SECRET,
+#             "redirect_uris": ["https://example.com/cb"],
+#             "services": {
+#                 "client_notification": {
+#                     "class": "idpyoidc.client.oidc.backchannel_authentication.ClientNotification",
+#                     "kwargs": {"conf": {"default_authn_method": "client_notification_authn"}},
+#                 },
+#             },
+#             "client_authn_methods": {
+#                 "client_notification_authn": {
+#                     'class': "idpyoidc.client.oidc.backchannel_authentication.ClientNotificationAuthn"
+#                 }
+#             },
+#         }
+#
+#         client = Client(keyjar=CLI_KEY, config=config, services=DEFAULT_OAUTH2_SERVICES)
+#
+#         client.upstream_get("context").provider_info = {
+#             "client_notification_endpoint": "https://example.com/notify",
+#         }
+#
+#         return client
+#
+#     def _create_session(self, user_id, auth_req, sub_type="public", sector_identifier=""):
+#         if sector_identifier:
+#             authz_req = auth_req.copy()
+#             authz_req["sector_identifier_uri"] = sector_identifier
+#         else:
+#             authz_req = auth_req
+#         client_id = authz_req["client_id"]
+#         ae = create_authn_event(user_id)
+#         _session_manager = self.ciba["self.server"].context.session_manager
+#         return _session_manager.create_session(
+#             ae, authz_req, user_id, client_id=client_id, sub_type=sub_type
+#         )
+#
+#     def test_client_notification(self):
+#         _keyjar = self.ciba["self.server"].context.keyjar
+#         _jwt = JWT(_keyjar, iss=CLIENT_ID, sign_alg="HS256")
+#         _jwt.with_jti = True
+#         _assertion = _jwt.pack({"aud": [ISSUER]})
+#
+#         request = {
+#             "client_assertion": _assertion,
+#             "client_assertion_type": JWT_BEARER,
+#             "scope": "openid email example-scope",
+#             "client_notification_token": "8d67dc78-7faa-4d41-aabd-67707b374255",
+#             "binding_message": "W4SCT",
+#             "login_hint": "mail:diana@example.org",
+#         }
+#
+#         _authn_endpoint = self.ciba["self.server"].upstream_get("endpoint", "backchannel_authentication")
+#
+#         req = AuthenticationRequest(**request)
+#         req = _authn_endpoint.parse_request(req.to_urlencoded())
+#         _info = _authn_endpoint.process_request(req)
+#         assert _info
+#
+#         _session_manager = self.ciba["self.server"].context.session_manager
+#         sid = _session_manager.auth_req_id_map[_info["response_args"]["auth_req_id"]]
+#         _user_id, _client_id, _grant_id = _session_manager.decrypt_session_id(sid)
+#
+#         # Some time passes and the client authentication is successfully performed
+#         # The interaction with the authentication device is not shown
+#         session_id_2 = self._create_session(_user_id, req)
+#
+#         # Now it's time to send a client notification
+#         req_args = {
+#             "auth_req_id": _info["response_args"]["auth_req_id"],
+#             "client_notification_token": request["client_notification_token"],
+#         }
+#
+#         _service = self.ciba["client"].upstream_get("service", "client_notification")
+#         _req_param = _service.get_request_parameters(request_args=req_args)
+#         assert _req_param
+#         assert isinstance(_req_param["request"], NotificationRequest)
+#         assert set(_req_param.keys()) == {"method", "request", "url", "body", "headers"}
+#         assert _req_param["method"] == "POST"
+#         # This is the client's notification endpoint
+#         assert (
+#             _req_param["url"]
+#             == self.ciba["client"]
+#             .upstream_get("context")
+#             .provider_info["client_notification_endpoint"]
+#         )
+#         assert set(_req_param["request"].keys()) == {"auth_req_id", "client_notification_token"}
